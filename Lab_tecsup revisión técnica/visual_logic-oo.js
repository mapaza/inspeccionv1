/**
 * Generated by Verge3D Puzzles v.4.0.1
 * Thu Sep 22 2022 23:57:26 GMT-0500 (hora estándar de Perú)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    var PROC = {
    
};

// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}

// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if ((attr == 'href' || attr == 'src') && value instanceof Promise) {
            // resolve promise value for url-based attributes
            value.then(function(response) {
                elem[attr] = response;
            });
        } else {
            elem[attr] = value;
        }
    }
}

// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}

function MediaHTML5(isVideo) {
    this.source = null;
}

Object.assign(MediaHTML5.prototype, {

    load: function(url, isVideo) {
        if (isVideo) {
            this.source = document.createElement('video');
            this.source.playsInline = true;
            this.source.preload = 'auto';
            this.source.autoload = true;
            this.source.crossOrigin = 'anonymous';
        } else {
            this.source = document.createElement('audio');
        }

        this.source.src = url;
        return this;
    },

    play: function() {
        this.source.play();
    },

    pause: function() {
        this.source.pause();
    },

    stop: function() {
        this.source.pause();
        this.source.currentTime = 0;
    },

    rewind: function() {
        this.source.currentTime = 0;
    },

    setPlaybackTime: function(time) {
        this.source.currentTime = time
    },

    getPlaybackTime: function() {
        return this.source.currentTime;
    },

    setPlaybackRate: function(rate) {
        this.source.playbackRate = rate;
    },

    isPlaying: function() {
        return this.source.duration > 0 && !this.source.paused;
    },

    setLoop: function(looped) {
        this.source.loop = looped;
    },

    setVolume: function(volume) {
        this.source.volume = volume;
    },

    setMuted: function(muted) {
        this.source.muted = muted;
    },

});

// loadMedia puzzle
function loadMedia_HTML5(url) {

    var elems = _pGlob.mediaElements;
    if (!(url in elems)) {
        elems[url] = new MediaHTML5().load(url);
    }
    return elems[url];
}

// playSound puzzle
function playSound(mediaElem, loop) {
    if (!mediaElem)
        return;
    mediaElem.setLoop(loop);
    mediaElem.play();
}

// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, eventType, callback]);
    }
}

// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}



// initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = true;
_initGlob.output.initOptions.useBkgTransp = false;
_initGlob.output.initOptions.preserveDrawBuf = false;
_initGlob.output.initOptions.useCompAssets = false;
_initGlob.output.initOptions.useFullscreen = false;


// initPreloader puzzle
_initGlob.output.initOptions.useCustomPreloader = true;
_initGlob.output.initOptions.preloaderStartCb = function() {
    _initGlob.percentage = 0;
    (function() {})();
};
_initGlob.output.initOptions.preloaderProgressCb = function(percentage) {
    _initGlob.percentage = percentage;
    (function() {
  setHTMLElemAttribute('innerHTML', String(Math.round(_initGlob.percentage)) + '%', 'percentage', false);
  setHTMLElemAttribute('style', ['stroke-dashoffset: ',472 - (472 * Math.round(_initGlob.percentage)) / 100,';'].join(''), 'circle', false);
})();
};
_initGlob.output.initOptions.preloaderEndCb = function() {
    _initGlob.percentage = 100;
    (function() {
  setHTMLElemStyle('display', 'none', 'preloader_screen', false);
  registerSetTimeout(2, function() {
    setHTMLElemStyle('display', 'flex', 'demo-modal', false);
    setHTMLElemStyle('background', 'rgba(0,0,0,.5)', 'demo-modal', false);
    eventHTMLElem('click', 'btn_reproducir_info', false, function(event) {
      playSound(loadMedia_HTML5('./audio/audio-informacion.mp3'), false);
    });
  });
})();
};

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["do something4"] = do_something4;
this.procedures["do something5"] = do_something5;
this.procedures["do something7"] = do_something7;
this.procedures["do something8"] = do_something8;
this.procedures["do something9"] = do_something9;
this.procedures["do something10"] = do_something10;
this.procedures["do something11"] = do_something11;
this.procedures["do something13"] = do_something13;
this.procedures["do something14"] = do_something14;
this.procedures["do something12"] = do_something12;
this.procedures["do something15"] = do_something15;
this.procedures["do something16"] = do_something16;
this.procedures["do something18"] = do_something18;
this.procedures["do something21"] = do_something21;
this.procedures["do something19"] = do_something19;
this.procedures["do something20"] = do_something20;
this.procedures["do something22"] = do_something22;
this.procedures["do something24"] = do_something24;
this.procedures["do something23"] = do_something23;

var PROC = {
    "do something4": do_something4,
    "do something5": do_something5,
    "do something7": do_something7,
    "do something8": do_something8,
    "do something9": do_something9,
    "do something10": do_something10,
    "do something11": do_something11,
    "do something13": do_something13,
    "do something14": do_something14,
    "do something12": do_something12,
    "do something15": do_something15,
    "do something16": do_something16,
    "do something18": do_something18,
    "do something21": do_something21,
    "do something19": do_something19,
    "do something20": do_something20,
    "do something22": do_something22,
    "do something24": do_something24,
    "do something23": do_something23,
};

var is_playing_info, ft_etapa1, fin_etapa1, is_etapa1, subm_mostrar, subm1_ocultar, subm2_ocultar, subm3_ocultar, subm4_ocultar, subm5_ocultar, btn_mostrar, btn1_mostrar, btn2_mostrar, btn3_mostrar, btn4_mostrar, btn5_mostrar, estado1_ocultar, estado2_ocultar, estado3_ocultar, estado4_ocultar, estado5_ocultar, pos_max_ajuste, pos_max_desajuste, vueltas, angulo_menor_var, ft_etapa2, fin_etapa2, is_etapa2, contador, is_et2__1, is_et3__1, is_et4__1, is_et5__1, is_et5__5, ft_etapa3, fin_etapa3, is_etapa3, is_etapa4, is_et1__1, is_et3__2, is_et4__2, is_et5__2, ft_etapa4, fin_etapa4, inspeccion__submenu, is_et1__2, is_et2__2, is_et3__3, is_et4__3, is_et5__3, is_et5__6, is_et5__7, selected, ft_etapa5, fin_etapa5, is_etapa5, is_et1__3, is_et2__3, is_et3__4, is_et4__4, is_et5__4, is_et5__8, is_et1__4, is_et2__4, is_et3__5, is_et4__5, is_paused, var_num_in, var_num_end, is_et1__5, is_et2__5, is_et3__6, is_et4__6, is_et1__6, is_et2__6, is_et3__7, is_et4__7, is_et1__7, is_et2__7, is_et3__8, is_et4__8, is_et1__8, is_et2__8, is_et3__9, is_et4__9, is_et1__9, is_et2__9, is_et4__10, is_et2__10, is_et4__11, is_et1__10, is_et4__12, is_et4__13, is_et4__14, is_et4__15;

function MediaHTML5(isVideo) {
    this.source = null;
}

Object.assign(MediaHTML5.prototype, {

    load: function(url, isVideo) {
        if (isVideo) {
            this.source = document.createElement('video');
            this.source.playsInline = true;
            this.source.preload = 'auto';
            this.source.autoload = true;
            this.source.crossOrigin = 'anonymous';
        } else {
            this.source = document.createElement('audio');
        }

        this.source.src = url;
        return this;
    },

    play: function() {
        this.source.play();
    },

    pause: function() {
        this.source.pause();
    },

    stop: function() {
        this.source.pause();
        this.source.currentTime = 0;
    },

    rewind: function() {
        this.source.currentTime = 0;
    },

    setPlaybackTime: function(time) {
        this.source.currentTime = time
    },

    getPlaybackTime: function() {
        return this.source.currentTime;
    },

    setPlaybackRate: function(rate) {
        this.source.playbackRate = rate;
    },

    isPlaying: function() {
        return this.source.duration > 0 && !this.source.paused;
    },

    setLoop: function(looped) {
        this.source.loop = looped;
    },

    setVolume: function(volume) {
        this.source.volume = volume;
    },

    setMuted: function(muted) {
        this.source.muted = muted;
    },

});

// loadMedia puzzle
function loadMedia_HTML5(url) {

    var elems = _pGlob.mediaElements;
    if (!(url in elems)) {
        elems[url] = new MediaHTML5().load(url);
    }
    return elems[url];
}

// playSound puzzle
function playSound(mediaElem, loop) {
    if (!mediaElem)
        return;
    mediaElem.setLoop(loop);
    mediaElem.play();
}

// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}

// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}

// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}

// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, eventType, callback]);
    }
}

// stopSound puzzle
function stopSound(mediaElem) {
    if (!mediaElem) {
        return;
    }
    mediaElem.stop();
}

// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return obj.type !== 'AmbientLight' &&
           obj.name !== '' &&
           !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
           !obj.isAuxClippingMesh;
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    if (appInstance.scene) {
        appInstance.scene.traverse(function(obj) {
            if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
                objFound = obj;
                if (runTime) {
                    _pGlob.objCache[objName] = objFound;
                }
            }
        });
    }
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc.filter(function(name) {
        return name;
    });
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}

// getAnimations puzzle
function getAnimations(objSelector) {
    var objNames = retrieveObjectNames(objSelector);

    var animations = [];
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        // use objName as animName - for now we have one-to-one match
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, objName);
        if (action)
            animations.push(objName);
    }
    return animations;
}

/**
 * Get a scene that contains the root of the given action.
 */
function getSceneByAction(action) {
    var root = action.getRoot();
    var scene = root.type == "Scene" ? root : null;
    root.traverseAncestors(function(ancObj) {
        if (ancObj.type == "Scene") {
            scene = ancObj;
        }
    });
    return scene;
}

/**
 * Get the current scene's framerate.
 */
function getSceneAnimFrameRate(scene) {
    if (scene && 'animFrameRate' in scene.userData) {
        return scene.userData.animFrameRate;
    }
    return 24;
}

_pGlob.animMixerCallbacks = [];

var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished))
            appInstance.mixer.addEventListener('finished', onMixerFinished);
    };

}();

// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = getSceneByAction(action);
                var frameRate = getSceneAnimFrameRate(scene);

                action.repetitions = Infinity;

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = getSceneByAction(action);
            var frameRate = getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        case 'SET_SPEED':
            var timeScale = parseFloat(speed);
            action.timeScale = rev ? -timeScale : timeScale;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}

// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if ((attr == 'href' || attr == 'src') && value instanceof Promise) {
            // resolve promise value for url-based attributes
            value.then(function(response) {
                elem[attr] = response;
            });
        } else {
            elem[attr] = value;
        }
    }
}

/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && 'coordSystem' in scene.userData) {
        return scene.userData.coordSystem;
    }

    return 'Y_UP_RIGHT';
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
var eulerV3DToBlenderShortest = function() {

    var eulerTmp = new v3d.Euler();
    var eulerTmp2 = new v3d.Euler();
    var vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        var eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        var eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        var len = eulerBlender.toVector3(vec3Tmp).lengthSq();
        var lenAlt = eulerBlenderAlt.toVector3(vec3Tmp).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();

// dragRotate puzzle
function dragRotate(objSelector, mode, isParentSpace, blockId, parentDragOverBlockId) {
    var camera = appInstance.getCamera(true);
    if (!camera)
        return;

    if (!_pGlob.objDragOverInfoByBlock)
        return;

    var objNames = retrieveObjectNames(objSelector);

    var info = _pGlob.objDragOverInfoByBlock[parentDragOverBlockId];
    if (!info) return;

    var coordSystem = getCoordSystem();

    for (var i = 0; i < objNames.length; i++) {
        var obj = getObjectByName(objNames[i]);
        if (!obj) {
            continue;
        }

        if (mode == "X" || mode == "Y" || mode == "Z") {
            var objPos = obj.getWorldPosition(_pGlob.vec3Tmp);
            objPos.project(camera);

            var objX = (objPos.x + 1) / 2 * appInstance.getWidth();
            var objY = (-objPos.y + 1) / 2 * appInstance.getHeight();
            var vecFrom = _pGlob.vec2Tmp.set(info.prevX - objX, objY - info.prevY);
            var vecTo = _pGlob.vec2Tmp2.set(info.currX - objX, objY - info.currY);

            if (coordSystem == 'Z_UP_RIGHT')
                var axis = _pGlob.vec3Tmp.copy(mode == "X" ? _pGlob.AXIS_X
                        : (mode == "Y" ? _pGlob.AXIS_Z : _pGlob.AXIS_Y));
            else
                var axis = _pGlob.vec3Tmp.copy(mode == "X" ? _pGlob.AXIS_X
                        : (mode == "Y" ? _pGlob.AXIS_Y : _pGlob.AXIS_Z));

            var quat = _pGlob.quatTmp.setFromAxisAngle(axis, vecTo.angle() - vecFrom.angle());

            // a rotation axis pointing backwards (i.e. co-directionally
            // aligned with the view vector) should have inverted rotation
            var objToCalcSpace = isParentSpace && obj.parent ? obj.parent : obj;
            axis.applyQuaternion(objToCalcSpace.getWorldQuaternion(_pGlob.quatTmp2));

            var viewVec = camera.getWorldDirection(_pGlob.vec3Tmp2);
            if (viewVec.dot(axis) > 0) {
                quat.conjugate();
            }

            if (isParentSpace) {
                obj.quaternion.premultiply(quat);
            } else {
                obj.quaternion.multiply(quat);
            }
            obj.updateMatrixWorld(true);
        }
    }
}

function intersectPlaneCSS(plane, cssX, cssY, dest) {
    var coords = _pGlob.vec2Tmp;
    var rc = _pGlob.raycasterTmp;
    coords.x = (cssX / appInstance.getWidth()) * 2 - 1;
    coords.y = - (cssY / appInstance.getHeight()) * 2 + 1;
    rc.setFromCamera(coords, appInstance.getCamera(true));
    return rc.ray.intersectPlane(plane, dest);
}

// dragMove puzzle
_pGlob.dragMoveOrigins = {};

function dragMove(objSelector, mode, blockId, parentDragOverBlockId) {
    var camera = appInstance.getCamera();
    if (!camera)
        return;

    if (!_pGlob.objDragOverInfoByBlock)
        return;

    var objNames = retrieveObjectNames(objSelector);

    var info = _pGlob.objDragOverInfoByBlock[parentDragOverBlockId];
    if (!info) return;

    var draggedObj = getObjectByName(info.draggedObjName);
    if (!draggedObj) return;

    if (!(blockId in _pGlob.dragMoveOrigins)) {
        _pGlob.dragMoveOrigins[blockId] = [];
    }
    var posOrigins = _pGlob.dragMoveOrigins[blockId];
    var lenDiff = objNames.length - posOrigins.length;
    for (var i = 0; i < lenDiff; i++) {
        posOrigins.push(new v3d.Vector3());
    }

    for (var i = 0; i < objNames.length; i++) {
        var obj = getObjectByName(objNames[i]);
        if (!obj) {
            continue;
        }

        var posOrigin = posOrigins[i];

        if (!info.isMoved) {
            // the object position before the first move is used as an initial value
            posOrigin.copy(obj.position);
        }

        var coordSystem = getCoordSystem();

        if (mode == "X" || mode == "Y" || mode == "Z") {

            if (coordSystem == 'Z_UP_RIGHT') {
                var axis = mode == "X" ? _pGlob.AXIS_X : (mode == "Y" ? _pGlob.AXIS_Z : _pGlob.AXIS_Y);
                var coord = mode == "X" ? "x" : (mode == "Y" ? "z" : "y");
            } else {
                var axis = mode == "X" ? _pGlob.AXIS_X : (mode == "Y" ? _pGlob.AXIS_Y : _pGlob.AXIS_Z);
                var coord = mode == "X" ? "x" : (mode == "Y" ? "y" : "z");
            }

            var planeNor = camera.getWorldDirection(_pGlob.vec3Tmp);
            planeNor.cross(axis).cross(axis);
            var plane = _pGlob.planeTmp.setFromNormalAndCoplanarPoint(planeNor, draggedObj.position);

            var p0 = intersectPlaneCSS(plane, info.downX, info.downY, _pGlob.vec3Tmp);
            var p1 = intersectPlaneCSS(plane, info.currX, info.currY, _pGlob.vec3Tmp2);
            if (p0 && p1) {
                obj.position[coord] = posOrigin[coord] + p1[coord] - p0[coord];
            }
        } else if (mode == "XY" || mode == "XZ" || mode == "YZ") {
            if (coordSystem == 'Z_UP_RIGHT') {
                var normal = mode == "XY" ? _pGlob.AXIS_Y : (mode == "XZ" ? _pGlob.AXIS_Z : _pGlob.AXIS_X);
                var coord0 = mode == "XY" ? "x" : (mode == "XZ" ? "x" : "y");
                var coord1 = mode == "XY" ? "z" : (mode == "XZ" ? "y" : "z");
            } else {
                var normal = mode == "XY" ? _pGlob.AXIS_Z : (mode == "XZ" ? _pGlob.AXIS_Y : _pGlob.AXIS_X);
                var coord0 = mode == "XY" ? "x" : (mode == "XZ" ? "x" : "y");
                var coord1 = mode == "XY" ? "y" : (mode == "XZ" ? "z" : "z");
            }

            var plane = _pGlob.planeTmp.setFromNormalAndCoplanarPoint(normal, draggedObj.position);

            var p0 = intersectPlaneCSS(plane, info.downX, info.downY, _pGlob.vec3Tmp);
            var p1 = intersectPlaneCSS(plane, info.currX, info.currY, _pGlob.vec3Tmp2);
            if (p0 && p1) {
                obj.position[coord0] = posOrigin[coord0] + p1[coord0] - p0[coord0];
                obj.position[coord1] = posOrigin[coord1] + p1[coord1] - p0[coord1];
            }
        } else if (mode == "XYZ") {
            var planeNor = camera.getWorldDirection(_pGlob.vec3Tmp);
            var plane = _pGlob.planeTmp.setFromNormalAndCoplanarPoint(planeNor, draggedObj.position);

            var p0 = intersectPlaneCSS(plane, info.downX, info.downY, _pGlob.vec3Tmp);
            var p1 = intersectPlaneCSS(plane, info.currX, info.currY, _pGlob.vec3Tmp2);
            if (p0 && p1) {
                obj.position.addVectors(posOrigin, p1).sub(p0);
            }
        }
        obj.updateMatrixWorld(true);
    }
}

function RotationInterface() {
    /**
     * For user manipulations use XYZ extrinsic rotations (which
     * are the same as ZYX intrinsic rotations)
     *     - Blender/Max/Maya use extrinsic rotations in the UI
     *     - XYZ is the default option, but could be set from
     *       some order hint if exported
     */
    this._userRotation = new v3d.Euler(0, 0, 0, 'ZYX');
    this._actualRotation = new v3d.Euler();
}

Object.assign(RotationInterface, {
    initObject: function(obj) {
        if (obj.userData.puzzles === undefined) {
            obj.userData.puzzles = {}
        }
        if (obj.userData.puzzles.rotationInterface === undefined) {
            obj.userData.puzzles.rotationInterface = new RotationInterface();
        }

        var rotUI = obj.userData.puzzles.rotationInterface;
        rotUI.updateFromObject(obj);
        return rotUI;
    }
});

Object.assign(RotationInterface.prototype, {

    updateFromObject: function(obj) {
        var SYNC_ROT_EPS = 1e-8;

        if (!this._actualRotation.equalsEps(obj.rotation, SYNC_ROT_EPS)) {
            this._actualRotation.copy(obj.rotation);
            this._updateUserRotFromActualRot();
        }
    },

    getActualRotation: function(euler) {
        return euler.copy(this._actualRotation);
    },

    setUserRotation: function(euler) {
        // don't copy the order, since it's fixed to ZYX for now
        this._userRotation.set(euler.x, euler.y, euler.z);
        this._updateActualRotFromUserRot();
    },

    getUserRotation: function(euler) {
        return euler.copy(this._userRotation);
    },

    _updateUserRotFromActualRot: function() {
        var order = this._userRotation.order;
        this._userRotation.copy(this._actualRotation).reorder(order);
    },

    _updateActualRotFromUserRot: function() {
        var order = this._actualRotation.order;
        this._actualRotation.copy(this._userRotation).reorder(order);
    }

});

// getObjTransform puzzle
function getObjTransform(objName, isWorldSpace, mode, coord) {
    if (!objName)
        return;
    var obj = getObjectByName(objName);
    if (!obj)
        return;

    var coordSystem = getCoordSystem();

    var transformVal;

    if (isWorldSpace && obj.parent) {
        if (mode === 'position') {
            transformVal = coordsTransform(obj.getWorldPosition(_pGlob.vec3Tmp), 'Y_UP_RIGHT',
                coordSystem, mode === 'scale');
        } else if (mode === 'rotation') {
            transformVal = coordsTransform(obj.getWorldEuler(_pGlob.eulerTmp, 'XYZ'), 'Y_UP_RIGHT',
                coordSystem, mode === 'scale');
        } else if (mode === 'scale') {
            transformVal = coordsTransform(obj.getWorldScale(_pGlob.vec3Tmp), 'Y_UP_RIGHT',
                coordSystem, mode === 'scale');
        }

    } else if (mode === 'rotation' && coordSystem == 'Z_UP_RIGHT') {
        transformVal = eulerV3DToBlenderShortest(obj.rotation,
                _pGlob.eulerTmp);

    } else if (mode === 'rotation' && coordSystem == 'Y_UP_RIGHT') {
        // Maya coordinates
        // Use separate rotation interface to fix ambiguous rotations for Maya,
        // might as well do the same for Blender/Max.

        var rotUI = RotationInterface.initObject(obj);
        transformVal = rotUI.getUserRotation(_pGlob.eulerTmp);

    } else {
        transformVal = coordsTransform(obj[mode].clone(), 'Y_UP_RIGHT',
                coordSystem, mode === 'scale');
    }

    if (mode === 'rotation') {
        transformVal.x = v3d.MathUtils.radToDeg(transformVal.x);
        transformVal.y = v3d.MathUtils.radToDeg(transformVal.y);
        transformVal.z = v3d.MathUtils.radToDeg(transformVal.z);
    }

    if (coord == 'xyz') {
        // remove order component for Euler vectors
        return transformVal.toArray().slice(0, 3);
    } else {
        return transformVal[coord];
    }
}

// objConstraintAddLimit puzzle
function objConstraintAddLimit(constraintName, objSelector, mode, min, max, targetObjName, dist, distLimitMode) {
    var objNames;
    if (mode == 'DISTANCE') {
        if (!targetObjName) return;
        var targetObj = getObjectByName(targetObjName);
        if (!targetObj) return;
    }

    objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName) continue;

        var obj = getObjectByName(objName);
        if (!obj || !obj.constraints) continue;

        for (var j = obj.constraints.length - 1; j >= 0; j--) {
            if (obj.constraints[j].name == constraintName) {
                obj.constraints.splice(j, 1);
            }
        }

        var coordSystem = getCoordSystem();

        switch (mode) {
            case 'POS_X':
            case 'POS_Y':
            case 'POS_Z':
                var cons = new v3d.LimitLocationConstraint();
                cons.name = constraintName;

                if (coordSystem == 'Z_UP_RIGHT')
                    var compIndex = mode == 'POS_X' ? 0 : (mode == 'POS_Y' ? 2 : 1);
                else
                    var compIndex = mode == 'POS_X' ? 0 : (mode == 'POS_Y' ? 1 : 2);

                // swizzle sign and limits order
                if (coordSystem == 'Z_UP_RIGHT' && mode == 'POS_Y') {
                    cons.min.setComponent(compIndex, -max);
                    cons.max.setComponent(compIndex, -min);
                } else {
                    cons.min.setComponent(compIndex, min);
                    cons.max.setComponent(compIndex, max);
                }
                obj.constraints.push(cons);
                break;

            case 'ROT_X':
            case 'ROT_Y':
            case 'ROT_Z':
                var cons = new v3d.LimitRotationConstraint();
                cons.name = constraintName;

                if (coordSystem == 'Z_UP_RIGHT')
                    cons.axis = mode == 'ROT_X' ? 'X' : (mode == 'ROT_Y' ? 'Z' : 'Y');
                else
                    cons.axis = mode == 'ROT_X' ? 'X' : (mode == 'ROT_Y' ? 'Y' : 'Z');

                // swizzle sign and limits order
                if (coordSystem == 'Z_UP_RIGHT' && mode == 'ROT_Y') {
                    cons.min = v3d.MathUtils.degToRad(-max);
                    cons.max = v3d.MathUtils.degToRad(-min);
                } else {
                    cons.min = v3d.MathUtils.degToRad(min);
                    cons.max = v3d.MathUtils.degToRad(max);
                }

                obj.constraints.push(cons);
                break;

            case 'SCALE_X':
            case 'SCALE_Y':
            case 'SCALE_Z':
                var cons = new v3d.LimitScaleConstraint();
                cons.name = constraintName;

                if (coordSystem == 'Z_UP_RIGHT')
                    var compIndex = mode == 'SCALE_X' ? 0 : (mode == 'SCALE_Y' ? 2 : 1);
                else
                    var compIndex = mode == 'SCALE_X' ? 0 : (mode == 'SCALE_Y' ? 1 : 2);

                cons.min.setComponent(compIndex, min);
                cons.max.setComponent(compIndex, max);
                obj.constraints.push(cons);
                break;

            case 'DISTANCE':
                var cons =  new v3d.LimitDistanceConstraint(targetObj);
                cons.name = constraintName;
                cons.distance = dist;
                cons.limitMode = distLimitMode;
                obj.constraints.push(cons);
                break;
        }
    }
}

// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function initObjectPicking(callback, eventType, mouseDownUseTouchStart, mouseButtons) {

    var elem = appInstance.renderer.domElement;
    elem.addEventListener(eventType, pickListener);
    if (v3d.PL.editorEventListeners)
        v3d.PL.editorEventListeners.push([elem, eventType, pickListener]);

    if (eventType == 'mousedown') {

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, pickListener);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, pickListener]);

    } else if (eventType == 'dblclick') {

        var prevTapTime = 0;

        function doubleTapCallback(event) {

            var now = new Date().getTime();
            var timesince = now - prevTapTime;

            if (timesince < 600 && timesince > 0) {

                pickListener(event);
                prevTapTime = 0;
                return;

            }

            prevTapTime = new Date().getTime();
        }

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, doubleTapCallback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, doubleTapCallback]);
    }

    var raycaster = new v3d.Raycaster();

    function pickListener(event) {

        // to handle unload in loadScene puzzle
        if (!appInstance.getCamera())
            return;

        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            if (mouseButtons && mouseButtons.indexOf(event.button) == -1)
                return;
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(_pGlob.screenCoords, appInstance.getCamera(true));
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList, false);
        callback(intersects, event);
    }
}

function objectsIncludeObj(objNames, testedObjName) {
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// utility function used by the whenClicked, whenHovered, whenDraggedOver, and raycast puzzles
function getPickedObjectName(obj) {
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}

function eventGetOffsetCoords(e, touchId, dest) {
    if (e instanceof MouseEvent) {
        dest.set(e.offsetX, e.offsetY);
    } else if (window.TouchEvent && e instanceof TouchEvent) {
        var rect = e.target.getBoundingClientRect();
        var touches = e.touches;
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            touches = e.changedTouches;
        }

        var touch = touches[0];
        for (var i = 0; i < touches.length; i++) {
            if (touches[i].identifier == touchId) {
                touch = touches[i];
                break;
            }
        }

        dest.set(touch.clientX - rect.left, touch.clientY - rect.top);
    }
    return dest;
}

function eventTouchIdGetFirst(e) {
    if (e instanceof MouseEvent) {
        return -1;
    } else if (window.TouchEvent && e instanceof TouchEvent) {
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            return e.changedTouches[0].identifier;
        } else {
            return e.touches[0].identifier;
        }
    }
    return -1;
}

/**
 * For "touchstart", "touchend" and "touchmove" events returns true if a touch
 * object with the provided touch id is in the changedTouches array, otherwise
 * - false. For other events returns true.
 */
function eventTouchIdChangedFilter(e, touchId) {
    if (window.TouchEvent && e instanceof TouchEvent) {
        if (e.type == "touchstart" || e.type == "touchend" || e.type == "touchmove") {
            var isChanged = false;
            for (var i = 0; i < e.changedTouches.length; i++) {
                if (e.changedTouches[i].identifier == touchId) {
                    isChanged = true;
                    break;
                }
            }
            return isChanged;
        }
    }

    return true;
}

function initDragOverInfo() {
    return {
        draggedObjName: '',
        downX: 0, downY: 0,
        prevX: 0, prevY: 0,
        currX: 0, currY: 0,
        isDowned: false,
        isMoved: false,
        touchId: -1
    };
}

// whenDraggedOver puzzle
_pGlob.objDragOverInfoGlobal = [];
_pGlob.objDragOverInfoByBlock = {}

initObjectPicking(function(intersects, downEvent) {

    _pGlob.objDragOverInfoGlobal.forEach(function(el) {

        if (downEvent instanceof MouseEvent)
            if (el.mouseButtons.indexOf(downEvent.button) == -1)
                return;

        var maxIntersects = el.xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);

            if (objectsIncludeObj([el.objName], objName)) {
                el.callback({ downEvent: downEvent, draggedObjName: objName });
            }

        }

    });

}, 'mousedown', true);

// whenDraggedOver puzzle
function registerOnDrag(objSelector, xRay, mouseButtons, cbStart, cbMove, cbDrop, blockId) {

    var cb = function(cbParam) {

        if (appInstance.controls) {
            appInstance.controls.enabled = false;
        }

        if (!(blockId in _pGlob.objDragOverInfoByBlock)) {
            _pGlob.objDragOverInfoByBlock[blockId] = initDragOverInfo();
        }
        var info = _pGlob.objDragOverInfoByBlock[blockId];

        // NOTE: don't use more than one pointing event, e.g. don't process
        // some events related to multitouch actions
        if (info.isDowned) {
            return;
        }

        var touchId = eventTouchIdGetFirst(cbParam.downEvent);
        var coords = eventGetOffsetCoords(cbParam.downEvent, touchId,
                _pGlob.vec2Tmp);

        info.downX = info.prevX = info.currX = coords.x;
        info.downY = info.prevY = info.currY = coords.y;
        info.touchId = touchId;
        info.isDowned = true;
        info.isMoved = false;
        info.draggedObjName = cbParam.draggedObjName;

        cbStart(cbParam.downEvent);

        var elem = appInstance.container;

        var moveCb = function(e) {
            if (!eventTouchIdChangedFilter(e, info.touchId)) {
                // don't handle events not intended for this particular touch
                return;
            }

            var coords = eventGetOffsetCoords(e, info.touchId, _pGlob.vec2Tmp);
            info.prevX = info.currX;
            info.prevY = info.currY;
            info.currX = coords.x;
            info.currY = coords.y;
            cbMove(e);
            info.isMoved = true;
        }
        var upCb = function(e) {
            if (!eventTouchIdChangedFilter(e, info.touchId)) {
                // don't handle events not intended for this particular touch
                return;
            }

            var coords = eventGetOffsetCoords(e, info.touchId, _pGlob.vec2Tmp);
            info.currX = coords.x;
            info.currY = coords.y;
            info.prevX = info.currX;
            info.prevY = info.currY;
            cbDrop(e);
            info.isDowned = false;

            elem.removeEventListener('mousemove', moveCb);
            elem.removeEventListener('touchmove', moveCb);
            elem.removeEventListener('mouseup', upCb);
            elem.removeEventListener('touchend', upCb);
            if (appInstance.controls) {
                appInstance.controls.enabled = true;
            }
        }

        elem.addEventListener('mousemove', moveCb);
        elem.addEventListener('touchmove', moveCb);
        elem.addEventListener('mouseup', upCb);
        elem.addEventListener('touchend', upCb);
    }

    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        _pGlob.objDragOverInfoGlobal.push({
            objName: objName,
            callback: cb,
            xRay: xRay,
            mouseButtons: mouseButtons
        });
    }
}

// outline puzzle
function outline(objSelector, doWhat) {
    var objNames = retrieveObjectNames(objSelector);

    if (!appInstance.postprocessing || !appInstance.postprocessing.outlinePass)
        return;
    var outlineArray = appInstance.postprocessing.outlinePass.selectedObjects;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        if (doWhat == "ENABLE") {
            if (outlineArray.indexOf(obj) == -1)
                outlineArray.push(obj);
        } else {
            var index = outlineArray.indexOf(obj);
            if (index > -1)
                outlineArray.splice(index, 1);
        }
    }
}

// whenClicked puzzle
function registerOnClick(objSelector, xRay, doubleClick, mouseButtons, cbDo, cbIfMissedDo) {

    // for AR/VR
    _pGlob.objClickInfo = _pGlob.objClickInfo || [];

    _pGlob.objClickInfo.push({
        objSelector: objSelector,
        callbacks: [cbDo, cbIfMissedDo]
    });

    initObjectPicking(function(intersects, event) {

        var isPicked = false;

        var maxIntersects = xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);
            var objNames = retrieveObjectNames(objSelector);

            if (objectsIncludeObj(objNames, objName)) {
                // save the object for the pickedObject block
                _pGlob.pickedObject = objName;
                isPicked = true;
                cbDo(event);
            }
        }

        if (!isPicked) {
            _pGlob.pickedObject = '';
            cbIfMissedDo(event);
        }

    }, doubleClick ? 'dblclick' : 'mousedown', false, mouseButtons);
}

// show and hide puzzles
function changeVis(objSelector, bool) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
        obj.resolveMultiMaterial().forEach(function(objR) {
            objR.visible = bool;
        });
    }
}

// Describe this function...
function do_something4() {
  is_et2__1 = true;
  outline('<none>', 'ENABLE');
  registerOnClick('<none>', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et2__1 == true) {
    }
    is_et2__1 = false;
  }, function() {});
}

// Describe this function...
function do_something5() {
}

// Describe this function...
function do_something7() {
}

// Describe this function...
function do_something8() {
}

// Describe this function...
function do_something9() {
}

// Describe this function...
function do_something10() {
}

// Describe this function...
function do_something11() {
}

// Describe this function...
function do_something13() {
}

// Describe this function...
function do_something14() {
}

// Describe this function...
function do_something12() {
}

// Describe this function...
function do_something15() {
}

// Describe this function...
function do_something16() {
}

// Describe this function...
function do_something18() {
}

// Describe this function...
function do_something21() {
}

// Describe this function...
function do_something19() {
}

// Describe this function...
function do_something20() {
}

// Describe this function...
function do_something22() {
}

// Describe this function...
function do_something24() {
}

// Describe this function...
function do_something23() {
}


eventHTMLElem('click', 'btn_reproducir_info', false, function(event) {
  is_playing_info = true;
  playSound(loadMedia_HTML5('./audio/audio-informacion.mp3'), false);
  setHTMLElemStyle('display', 'none', 'btn_reproducir_info', false);
  setHTMLElemStyle('display', 'initial', 'btn_is_playing', false);
  setHTMLElemStyle('background', '#1E4055', 'btn_is_playing', false);
  is_paused = false;
  registerSetTimeout(37, function() {
    setHTMLElemStyle('display', 'initial', 'btn_reproducir_info', false);
    setHTMLElemStyle('display', 'none', 'btn_is_playing', false);
    setHTMLElemStyle('background', '#2C8AC7', 'btn_reproducir_info', false);
  });
});

/* Ventana de Informacion */

is_playing_info = false;

eventHTMLElem('click', 'btn_cerrar_objetivos', false, function(event) {
  setHTMLElemStyle('display', 'none', 'demo-modal-objetivos', false);
  setHTMLElemStyle('background', 'rgba(0,0,0,0)', 'demo-modal-objetivos', false);
});

eventHTMLElem('click', 'btn_abrir_info', false, function(event) {
  setHTMLElemStyle('display', 'flex', 'demo-modal', false);
  setHTMLElemStyle('background', 'rgba(0,0,0,.5)', 'demo-modal', false);
});
eventHTMLElem('click', 'btn_cerrar_info', false, function(event) {
  if (is_playing_info == true) {
    stopSound(loadMedia_HTML5('./audio/audio-informacion.mp3'));
    setHTMLElemStyle('display', 'none', 'demo-modal', false);
    is_playing_info = false;
  } else {
    setHTMLElemStyle('background', 'rgba(0,0,0,.5)', 'demo-modal-objetivos', false);
    setHTMLElemStyle('display', 'none', 'demo-modal', false);
    registerSetTimeout(1, function() {
      setHTMLElemStyle('display', 'flex', 'demo-modal-objetivos', false);
    });
  }
});

/* Funcion para saber el nombre de un objeto */

/* Init */

/* Menu Opciones */

ft_etapa1 = true;
ft_etapa2 = true;
ft_etapa3 = true;
ft_etapa4 = true;
ft_etapa5 = true;


operateAnimation('STOP', getAnimations(['GROUP', 'Group042']), null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('STOP', getAnimations(['GROUP', 'Group043']), null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('STOP', getAnimations(['GROUP', 'Group045']), null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('STOP', getAnimations(['GROUP', 'G_abracion']), null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('STOP', getAnimations(['GROUP', 'G_Corrocion']), null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('STOP', getAnimations(['GROUP', 'G_desgaste adhesivo']), null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('STOP', getAnimations(['GROUP', 'G_erocion por contaminacion']), null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('STOP', getAnimations(['GROUP', 'G_fatiga por contacto por rodadura']), null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('STOP', getAnimations(['GROUP', 'G_microscopio']), null, null, 'AUTO', 1,
        function() {}, false);


fin_etapa1 = false;
fin_etapa2 = false;
fin_etapa3 = false;
fin_etapa4 = false;
fin_etapa5 = false;

is_etapa1 = true;
is_etapa2 = true;
is_etapa3 = true;
is_etapa4 = true;
is_etapa5 = true;
inspeccion__submenu = true;

/* etapa1 */
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et1__1', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et1__2', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et1__3', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et1__4', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et1__5', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et1__6', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et1__7', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et1__8', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et1__9', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et1__10', false);
/* etapa2 */
setHTMLElemAttribute('style', 'pointer-events: none; ', 'btn__etapa2', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et2__1', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et2__2', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et2__3', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et2__4', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et2__5', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et2__6', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et2__7', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et2__8', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et2__9', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et2__10', false);
/* etapa3 */
setHTMLElemAttribute('style', 'pointer-events: none; ', 'btn__etapa3', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et3__1', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et3__2', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et3__3', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et3__4', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et3__5', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et3__6', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et3__7', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et3__8', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et3__9', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et3__10', false);
/* etap4 */
setHTMLElemAttribute('style', 'pointer-events: none; ', 'btn__etapa5', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et5__1', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et5__2', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et5__3', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et5__4', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et5__5', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et5__5', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et5__7', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et5__8', false);
/* etap4 */
setHTMLElemAttribute('style', 'pointer-events: none; ', 'btn__etapa4', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et4__1', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et4__2', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et4__3', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et4__4', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et4__5', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et4__6', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et4__7', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et4__8', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et4__9', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et4__10', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et4__11', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et4__12', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et4__13', false);
setHTMLElemAttribute('style', 'pointer-events: none; ', 'et4__14', false);

'et1__submenu';

pos_max_ajuste;

pos_max_desajuste;

pos_max_ajuste = -0.32;

pos_max_desajuste = -0.527;

/* 2 */

/* 1 */

registerOnDrag('instance_rotator_vice', false, [0,1,2], function() {}, function() {
  contador = 0;
  console.log('------3---');
  console.log('---3=>' + String(contador));
  dragRotate('instance_rotator_vice', 'Y', false, '+|En8)^ND4/|)8A:c/QF', '2oeVAbo/Mh}9j9%WC,mv');
  dragMove('Arm_vice', 'Y', 'crwAD3fo;t0(/-j*#4Mu', '2oeVAbo/Mh}9j9%WC,mv');
  console.log('position_arm_vice =>' + String(getObjTransform('Arm_vice', false, 'position', 'y')));
  console.log(getObjTransform('instance_rotator_vice', false, 'rotation', 'y'));
  objConstraintAddLimit('arm_max_ajuste', 'Arm_vice', 'POS_Y', -0.527, -0.32, '', 0, 'LIMITDIST_ONSURFACE');
}, function() {}, '2oeVAbo/Mh}9j9%WC,mv');

/* 3 */

vueltas = 0;

angulo_menor_var = 0;

/* Etapa 1 */
eventHTMLElem('click', 'et1__1', false, function(event) {
  is_et1__1 = true;
  outline(['ALL_OBJECTS'], 'DISABLE');
  outline('cylinder_barrel', 'ENABLE');
  outline('rear_bearing_cap', 'ENABLE');
  outline('bearing_cap', 'ENABLE');
  outline('hex_nut', 'ENABLE');
  outline('piston_rod_round', 'ENABLE');
  registerOnClick('cylinder_barrel', false, false, [0,1,2], function() {
    if (is_et1__1 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 1, 240, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__1_1', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__1_1', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et1__2', false);
        is_et1__1 = false;
      }, false);

          }
    outline(['ALL_OBJECTS'], 'DISABLE');
  }, function() {});
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et1__1', false);
  setHTMLElemStyle('color', '#1e85c9', 'et1__1', false);
  setHTMLElemStyle('display', 'flex', 'note__1_1', false);
});
eventHTMLElem('click', 'et1__2', false, function(event) {
  is_et1__2 = true;
  outline('hex_nut', 'ENABLE');
  setHTMLElemStyle('display', 'flex', 'note__1_2', false);
  setHTMLElemStyle('display', 'none', 'note__1_1', false);
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et1__2', false);
  setHTMLElemStyle('color', '#1e85c9', 'et1__2', false);
  registerOnClick('hex_nut', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et1__2 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 240, 360, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__1_2', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__1_2', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et1__3', false);
        is_et1__2 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et1__3', false, function(event) {
  is_et1__3 = true;
  outline(['ALL_OBJECTS'], 'DISABLE');
  outline('piston_rod_round', 'ENABLE');
  registerOnClick('piston_rod_round', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et1__3 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 360, 420, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__1_3', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__1_3', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et1__4', false);
        is_et1__3 = false;
      }, false);

          }
  }, function() {});
  setHTMLElemStyle('display', 'none', 'note__1_2', false);
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et1__3', false);
  setHTMLElemStyle('color', '#1e85c9', 'et1__3', false);
  setHTMLElemStyle('display', 'flex', 'note__1_3', false);
});
eventHTMLElem('click', 'et1__4', false, function(event) {
  is_et1__4 = true;
  outline(['ALL_OBJECTS'], 'DISABLE');
  outline('piston_rod_round', 'ENABLE');
  setHTMLElemStyle('display', 'none', 'note__1_3', false);
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et1__4', false);
  setHTMLElemStyle('color', '#1e85c9', 'et1__4', false);
  registerOnClick('piston_rod_round', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et1__4 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 430, 500, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__1_4', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__1_4', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et1__5', false);
        is_et1__4 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et1__5', false, function(event) {
  is_et1__5 = true;
  outline('t-handle', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et1__5', false);
  setHTMLElemStyle('color', '#1e85c9', 'et1__5', false);
  registerOnClick('t-handle', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et1__5 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 500, 1020, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__1_5', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__1_5', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et1__6', false);
        is_et1__5 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et1__6', false, function(event) {
  is_et1__6 = true;
  outline('t-handle', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et1__6', false);
  setHTMLElemStyle('color', '#1e85c9', 'et1__6', false);
  registerOnClick('t-handle', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et1__6 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 1020, 1560, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__1_6', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__1_6', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et1__7', false);
        is_et1__6 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et1__7', false, function(event) {
  is_et1__7 = true;
  outline('bearing_cap', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et1__7', false);
  setHTMLElemStyle('color', '#1e85c9', 'et1__7', false);
  setHTMLElemStyle('display', 'flex', 'note__1_7', false);
  registerOnClick('bearing_cap', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et1__7 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 1560, 1660, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__1_7', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__1_7', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et1__8', false);
        is_et1__7 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et1__8', false, function(event) {
  is_et1__8 = true;
  outline('rear_bearing_cap', 'ENABLE');
  setHTMLElemStyle('display', 'none', 'note__1_7', false);
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et1__8', false);
  setHTMLElemStyle('color', '#1e85c9', 'et1__8', false);
  registerOnClick('rear_bearing_cap', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et1__8 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 1660, 1780, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__1_8', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__1_8', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et1__9', false);
        is_et1__8 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et1__9', false, function(event) {
  is_et1__9 = true;
  outline('piston_rod_round', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et1__9', false);
  setHTMLElemStyle('color', '#1e85c9', 'et1__9', false);
  setHTMLElemStyle('display', 'flex', 'note__1_9', false);
  registerOnClick('piston_rod_round', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et1__9 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 1780, 1940, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__1_9', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__1_9', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et1__10', false);
        is_et1__9 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et1__10', false, function(event) {
  outline('cylinder_barrel', 'ENABLE');
  is_et1__10 = true;
  setHTMLElemStyle('display', 'none', 'note__1_9', false);
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et1__10', false);
  setHTMLElemStyle('color', '#1e85c9', 'et1__10', false);
  registerOnClick('cylinder_barrel', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et1__10 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 1940, 2080, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__1_10', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__1_10', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'btn__etapa2', false);
        setHTMLElemStyle('color', '#fafafa', 'btn__etapa1', false);
        fin_etapa1 = true;
        setHTMLElemStyle('backgroundColor', '#1E4055', 'btn__etapa1', false);
        is_et1__10 = false;
      }, false);

          }
  }, function() {});
});

false;

true;

false;

false;

false;

false;

false;

false;

false;

false;

false;

false;

false;

false;

false;

false;

false;

false;

false;

false;

false;

false;

false;

false;

false;

false;

false;

false;

/* Etapa 2 */
eventHTMLElem('click', 'et2__1', false, function(event) {
  is_et2__1 = true;
  outline('bearing_cap', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et2__1', false);
  setHTMLElemStyle('color', '#1e85c9', 'et2__1', false);
  registerOnClick('bearing_cap', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et2__1 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 2080, 2200, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__2_1', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__2_1', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et2__2', false);
        is_et2__1 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et2__2', false, function(event) {
  is_et2__2 = true;
  outline('screwdriver', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et2__2', false);
  setHTMLElemStyle('color', '#1e85c9', 'et2__2', false);
  setHTMLElemStyle('display', 'flex', 'note__2_2', false);
  registerOnClick('screwdriver', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et2__2 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 2200, 2680, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__2_2', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__2_2', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et2__3', false);
        is_et2__2 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et2__3', false, function(event) {
  is_et2__3 = true;
  outline('piston_rod_round', 'ENABLE');
  outline('guide_band', 'ENABLE');
  outline('cushioning_boss_01', 'ENABLE');
  setHTMLElemStyle('display', 'none', 'note__2_2', false);
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et2__3', false);
  setHTMLElemStyle('color', '#1e85c9', 'et2__3', false);
  registerOnClick('piston_rod_round', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et2__3 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 2680, 2880, 'AUTO', 1,
              function() {
        changeVis('cushioning_boss_02', false);
        changeVis('threaded_coupling', false);
        changeVis('cushioning_boss_mov', true);
        changeVis('threaded_coupling_mov', true);
        console.log('termino hasta 2880');

        operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 2880, 2920, 'AUTO', 1,
                function() {
          setHTMLElemStyle('display', 'none', 'icon_substep__2_3', false);
          setHTMLElemStyle('display', 'initial', 'checked_icon_substep__2_3', false);
          setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et2__4', false);
          is_et2__3 = false;
          console.log('termino hasta 2920');
        }, false);

            }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et2__4', false, function(event) {
  is_et2__4 = true;
  outline('llave_mixta_1', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et2__4', false);
  setHTMLElemStyle('color', '#1e85c9', 'et2__4', false);
  setHTMLElemStyle('display', 'flex', 'note__2_4', false);
  registerOnClick('llave_mixta_1', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et2__4 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 2920, 3480, 'AUTO', 1,
              function() {
        changeVis('piston_washer_02', false);

        operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 3480, 3900, 'AUTO', 1,
                function() {
          setHTMLElemStyle('display', 'none', 'icon_substep__2_4', false);
          setHTMLElemStyle('display', 'initial', 'checked_icon_substep__2_4', false);
          setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et2__5', false);
          is_et2__4 = false;
        }, false);

            }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et2__5', false, function(event) {
  is_et2__5 = true;
  outline('bearing_cap', 'ENABLE');
  setHTMLElemStyle('display', 'none', 'note__2_4', false);
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et2__5', false);
  setHTMLElemStyle('color', '#1e85c9', 'et2__5', false);
  registerOnClick('bearing_cap', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et2__5 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 3900, 4580, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__2_5', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__2_5', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et2__6', false);
        is_et2__5 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et2__6', false, function(event) {
  is_et2__6 = true;
  outline('cushioning_seal_a', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et2__6', false);
  setHTMLElemStyle('color', '#1e85c9', 'et2__6', false);
  registerOnClick('cushioning_seal_a', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et2__6 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 4580, 4760, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__2_6', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__2_6', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et2__7', false);
        is_et2__6 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et2__7', false, function(event) {
  is_et2__7 = true;
  outline('screwdriver', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et2__7', false);
  setHTMLElemStyle('color', '#1e85c9', 'et2__7', false);
  setHTMLElemStyle('display', 'flex', 'note__2_7', false);
  registerOnClick('screwdriver', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et2__7 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 4760, 5140, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__2_7', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__2_7', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et2__8', false);
        is_et2__7 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et2__8', false, function(event) {
  is_et2__8 = true;
  outline('rear_bearing_cap', 'ENABLE');
  setHTMLElemStyle('display', 'none', 'note__2_7', false);
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et2__8', false);
  setHTMLElemStyle('color', '#1e85c9', 'et2__8', false);
  registerOnClick('rear_bearing_cap', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et2__8 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 5140, 5580, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__2_8', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__2_8', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et2__9', false);
        is_et2__8 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et2__9', false, function(event) {
  is_et2__9 = true;
  outline('cushioning_seal_b', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et2__9', false);
  setHTMLElemStyle('color', '#1e85c9', 'et2__9', false);
  registerOnClick('cushioning_seal_b', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et2__9 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 5580, 5720, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__2_9', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__2_9', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et2__10', false);
        is_et2__9 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et2__10', false, function(event) {
  is_et2__10 = true;
  outline('screwdriver', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et2__10', false);
  setHTMLElemStyle('color', '#1e85c9', 'et2__10', false);
  registerOnClick('screwdriver', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et2__10 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 5720, 6140, 'AUTO', 1,
              function() {
        changeVis('holding_disc_a', false);
        changeVis('cushioning_seal_a', false);
        changeVis('o_ring_a', false);
        changeVis('holding_disc_b', false);
        changeVis('cushioning_seal_b', false);
        changeVis('piston_washer_02', false);
        changeVis('scraper_ring_a', false);
        changeVis('o_ring_b', false);
        changeVis('piston_washer_02_static', true);
        changeVis('holding_disc_a_static', true);
        changeVis('cushioning_seal_a_static', true);
        changeVis('o_ring_a_static', true);
        changeVis('holding_disc_b_static', true);
        changeVis('cushioning_seal_b_static', true);
        changeVis('scraper_ring_a_static', true);
        changeVis('o_ring_b_static', true);
        setHTMLElemStyle('display', 'none', 'icon_substep__2_10', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__2_10', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'btn__etapa3', false);
        setHTMLElemStyle('backgroundColor', '#1E4055', 'btn__etapa2', false);
        setHTMLElemStyle('color', '#fafafa', 'btn__etapa2', false);
        is_et2__10 = false;
        fin_etapa2 = true;
      }, false);

          }
  }, function() {});
});

eventHTMLElem('click', 'et3__1', false, function(event) {
  is_et3__1 = true;
  outline('base_1', 'ENABLE');
  outline('base_2', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et3__1', false);
  setHTMLElemStyle('color', '#1e85c9', 'et3__1', false);
  registerOnClick('base_1', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et3__1 == true) {
      registerSetTimeout(2, function() {

        operateAnimation('PLAY', 'arm_dome', 6180, 6360, 'AUTO', 1,
                function() {}, false);

            });

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 6140, 6360, 'AUTO', 1,
              function() {
        registerSetTimeout(1, function() {

          operateAnimation('PLAY', 'Plane', 6360, 6390, 'AUTO', 1,
                  function() {
            setHTMLElemStyle('display', 'none', 'icon_substep__3_1', false);
            setHTMLElemStyle('display', 'initial', 'checked_icon_substep__3_1', false);
            setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et3__2', false);
            is_et3__1 = false;
          }, false);

              });
      }, false);

          }
  }, function() {});
  registerOnClick('base_2', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et3__1 == true) {
      registerSetTimeout(2, function() {

        operateAnimation('PLAY', 'arm_dome', 6180, 6360, 'AUTO', 1,
                function() {}, false);

            });

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 6140, 6360, 'AUTO', 1,
              function() {
        registerSetTimeout(1, function() {

          operateAnimation('PLAY', 'Plane', 6360, 6390, 'AUTO', 1,
                  function() {
            setHTMLElemStyle('display', 'none', 'icon_substep__3_1', false);
            setHTMLElemStyle('display', 'initial', 'checked_icon_substep__3_1', false);
            setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et3__2', false);
            is_et3__1 = false;
          }, false);

              });
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et3__2', false, function(event) {
  is_et3__2 = true;
  outline('bearing_cap', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et3__2', false);
  setHTMLElemStyle('color', '#1e85c9', 'et3__2', false);
  registerOnClick('bearing_cap', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et3__2 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 6400, 7580, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__3_2', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__3_2', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et3__3', false);
        is_et3__2 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et3__3', false, function(event) {
  is_et3__3 = true;
  outline('piston_rod_round', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et3__3', false);
  setHTMLElemStyle('color', '#1e85c9', 'et3__3', false);
  registerOnClick('piston_rod_round', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et3__3 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 7580, 8120, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__3_3', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__3_3', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et3__4', false);
        is_et3__3 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et3__4', false, function(event) {
  is_et3__4 = true;
  outline('cushioning_boss_01', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et3__4', false);
  setHTMLElemStyle('color', '#1e85c9', 'et3__4', false);
  registerOnClick('cushioning_boss_01', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et3__4 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 8120, 8420, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__3_4', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__3_4', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et3__5', false);
        is_et3__4 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et3__5', false, function(event) {
  is_et3__5 = true;
  outline('cushioning_boss_mov', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et3__5', false);
  setHTMLElemStyle('color', '#1e85c9', 'et3__5', false);
  registerOnClick('cushioning_boss_mov', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et3__5 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 8420, 8980, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__3_5', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__3_5', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et3__6', false);
        is_et3__5 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et3__6', false, function(event) {
  is_et3__6 = true;
  outline('rear_bearing_cap', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et3__6', false);
  setHTMLElemStyle('color', '#1e85c9', 'et3__6', false);
  registerOnClick('rear_bearing_cap', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et3__6 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 8980, 9640, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__3_6', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__3_6', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et3__7', false);
        is_et3__6 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et3__7', false, function(event) {
  is_et3__7 = true;
  outline('cylinder_barrel', 'ENABLE');
  setHTMLElemStyle('display', 'flex', 'note__3_7', false);
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et3__7', false);
  setHTMLElemStyle('color', '#1e85c9', 'et3__7', false);
  registerOnClick('cylinder_barrel', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et3__7 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 9640, 11040, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__3_7', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__3_7', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et3__8', false);
        is_et3__7 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et3__8', false, function(event) {
  is_et3__8 = true;
  outline('piston_rod_round', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et3__8', false);
  setHTMLElemStyle('display', 'none', 'note__3_7', false);
  setHTMLElemStyle('color', '#1e85c9', 'et3__8', false);
  setHTMLElemStyle('display', 'flex', 'note__3_8', false);
  registerOnClick('piston_rod_round', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et3__8 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 11040, 11800, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__3_8', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__3_8', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et3__9', false);
        is_et3__8 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et3__9', false, function(event) {
  is_et3__9 = true;
  outline('threaded_coupling_mov', 'ENABLE');
  setHTMLElemStyle('display', 'none', 'note__3_8', false);
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et3__9', false);
  setHTMLElemStyle('color', '#1e85c9', 'et3__9', false);
  setHTMLElemStyle('display', 'flex', 'note__3_9', false);
  registerOnClick('threaded_coupling_mov', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et3__9 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 11800, 12660, 'AUTO', 1,
              function() {
        changeVis('cushioning_boss_01', false);
        changeVis('threaded_coupling_mov', false);
        changeVis('cushioning_boss_mov', false);
        changeVis('cushioning_boss_01_fake', true);
        changeVis('threaded_coupling_mov_fake', true);
        changeVis('cushioning_boss_mov_fake', true);
        setHTMLElemStyle('display', 'none', 'icon_substep__3_9', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__3_9', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'btn__etapa4', false);
        setHTMLElemStyle('backgroundColor', '#1E4055', 'btn__etapa3', false);
        setHTMLElemStyle('color', '#fafafa', 'btn__etapa3', false);
        is_et3__9 = false;
        fin_etapa3 = true;
      }, false);

          }
  }, function() {});
});

eventHTMLElem('click', 'et4__1', false, function(event) {
  is_et4__1 = true;
  setHTMLElemStyle('display', 'none', 'note__3_9', false);
  setHTMLElemStyle('display', 'flex', 'note__4_1to2', false);
  outline('bote_de_Grasa', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et4__1', false);
  setHTMLElemStyle('color', '#1e85c9', 'et4__1', false);
  registerOnClick('bote_de_Grasa', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et4__1 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 12660, 13020, 'AUTO', 1,
              function() {
        changeVis('piston_washer_02_fake', true);
        changeVis('holding_disc_b_fake', true);
        changeVis('cushioning_seal_b_fake', true);
        changeVis('o_ring_b_fake', true);
        changeVis('scraper_ring_a_fake', true);
        changeVis('holding_disc_a_fake', true);
        changeVis('cushioning_seal_a_fake', true);
        changeVis('o_ring_a_fake', true);

        operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 13020, 13800, 'AUTO', 1,
                function() {
          setHTMLElemStyle('display', 'none', 'icon_substep__4_1', false);
          setHTMLElemStyle('display', 'initial', 'checked_icon_substep__4_1', false);
          setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et4__2', false);
          is_et4__1 = false;
        }, false);

            }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et4__2', false, function(event) {
  is_et4__2 = true;
  outline('scraper_ring_a_fake', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et4__2', false);
  setHTMLElemStyle('color', '#1e85c9', 'et4__2', false);
  registerOnClick('scraper_ring_a_fake', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et4__2 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 13800, 14920, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__4_2', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__4_2', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et4__3', false);
        is_et4__2 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et4__3', false, function(event) {
  is_et4__3 = true;
  setHTMLElemStyle('display', 'none', 'note__4_1to2', false);
  setHTMLElemStyle('display', 'flex', 'note__4_3', false);
  outline('scraper_ring_a_fake', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et4__3', false);
  setHTMLElemStyle('color', '#1e85c9', 'et4__3', false);
  registerOnClick('scraper_ring_a_fake', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et4__3 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 14920, 14960, 'AUTO', 1,
              function() {
        changeVis('scraper_ring_a_fake', false);
        changeVis('scraper_ring_a_verdadero', true);

        operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 14960, 15500, 'AUTO', 1,
                function() {
          setHTMLElemStyle('display', 'none', 'icon_substep__4_3', false);
          setHTMLElemStyle('display', 'initial', 'checked_icon_substep__4_3', false);
          setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et4__4', false);
          is_et4__3 = false;
        }, false);

            }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et4__4', false, function(event) {
  is_et4__4 = true;
  setHTMLElemStyle('display', 'none', 'note__4_3', false);
  setHTMLElemStyle('display', 'flex', 'note__4_4', false);
  outline('brocha_para_grasa', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et4__4', false);
  setHTMLElemStyle('color', '#1e85c9', 'et4__4', false);
  registerOnClick('brocha_para_grasa', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et4__4 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 15620, 16140, 'AUTO', 1,
              function() {
        changeVis('o_ring_a_fake', false);
        changeVis('o_ring_a_verdadero', true);
        setHTMLElemStyle('display', 'none', 'icon_substep__4_4', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__4_4', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et4__5', false);
        is_et4__4 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et4__5', false, function(event) {
  is_et4__5 = true;
  setHTMLElemStyle('display', 'none', 'note__4_4', false);
  setHTMLElemStyle('display', 'flex', 'note__4_5', false);
  outline('cushioning_seal_a_fake', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et4__5', false);
  setHTMLElemStyle('color', '#1e85c9', 'et4__5', false);
  registerOnClick('cushioning_seal_a_fake', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et4__5 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 16140, 16700, 'AUTO', 1,
              function() {
        changeVis('cushioning_seal_a_fake', false);
        changeVis('cushioning_seal_a_verdadero', true);
        setHTMLElemStyle('display', 'none', 'icon_substep__4_5', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__4_5', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et4__6', false);
        is_et4__5 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et4__6', false, function(event) {
  is_et4__6 = true;
  setHTMLElemStyle('display', 'none', 'note__4_5', false);
  outline('holding_disc_a_fake', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et4__6', false);
  setHTMLElemStyle('color', '#1e85c9', 'et4__6', false);
  registerOnClick('holding_disc_a_fake', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et4__6 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 16700, 16830, 'AUTO', 1,
              function() {
        changeVis('holding_disc_a_fake', false);
        changeVis('holding_disc_a_verdadero', true);

        operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 16830, 16920, 'AUTO', 1,
                function() {
          changeVis('cushioning_seal_a_fake', false);
          changeVis('cushioning_seal_a_verdadero', true);
          setHTMLElemStyle('display', 'none', 'icon_substep__4_6', false);
          setHTMLElemStyle('display', 'initial', 'checked_icon_substep__4_6', false);
          setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et4__7', false);
          is_et4__6 = false;
        }, false);

            }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et4__7', false, function(event) {
  is_et4__7 = true;
  setHTMLElemStyle('display', 'flex', 'note__4_7', false);
  outline('rear_bearing_cap', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et4__7', false);
  setHTMLElemStyle('color', '#1e85c9', 'et4__7', false);
  registerOnClick('rear_bearing_cap', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et4__7 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 16920, 17460, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__4_7', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__4_7', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et4__8', false);
        is_et4__7 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et4__8', false, function(event) {
  is_et4__8 = true;
  setHTMLElemStyle('display', 'none', 'note__4_7', false);
  outline('o_ring_b_fake', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et4__8', false);
  setHTMLElemStyle('color', '#1e85c9', 'et4__8', false);
  registerOnClick('o_ring_b_fake', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et4__8 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 17460, 17760, 'AUTO', 1,
              function() {
        changeVis('o_ring_b_fake', false);
        changeVis('o_ring_b_verdadero', true);
        setHTMLElemStyle('display', 'none', 'icon_substep__4_8', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__4_8', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et4__9', false);
        is_et4__8 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et4__9', false, function(event) {
  is_et4__9 = true;
  setHTMLElemStyle('display', 'flex', 'note__4_9', false);
  outline('cushioning_seal_b_fake', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et4__9', false);
  setHTMLElemStyle('color', '#1e85c9', 'et4__9', false);
  registerOnClick('cushioning_seal_b_fake', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et4__9 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 17760, 18500, 'AUTO', 1,
              function() {
        changeVis('cushioning_seal_b_fake', false);
        changeVis('cushioning_seal_b_verdadero', true);
        setHTMLElemStyle('display', 'none', 'icon_substep__4_9', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__4_9', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et4__10', false);
        is_et4__9 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et4__10', false, function(event) {
  is_et4__10 = true;
  setHTMLElemStyle('display', 'none', 'note__4_9', false);
  outline('holding_disc_b_fake', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et4__10', false);
  setHTMLElemStyle('color', '#1e85c9', 'et4__10', false);
  registerOnClick('holding_disc_b_fake', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et4__10 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 18500, 18640, 'AUTO', 1,
              function() {
        changeVis('holding_disc_b_fake', false);
        changeVis('holding_disc_b_verdadero', true);

        operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 18640, 18700, 'AUTO', 1,
                function() {
          changeVis('cushioning_seal_b_fake', false);
          changeVis('cushioning_seal_b_verdadero', true);
          setHTMLElemStyle('display', 'none', 'icon_substep__4_10', false);
          setHTMLElemStyle('display', 'initial', 'checked_icon_substep__4_10', false);
          setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et4__11', false);
          is_et4__10 = false;
        }, false);

            }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et4__11', false, function(event) {
  is_et4__11 = true;
  setHTMLElemStyle('display', 'flex', 'note__4_11', false);
  outline('piston_rod_round', 'ENABLE');
  outline('piston_washer_02_verdadero', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et4__11', false);
  setHTMLElemStyle('color', '#1e85c9', 'et4__11', false);
  registerOnClick('piston_rod_round', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et4__11 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 18700, 18900, 'AUTO', 1,
              function() {
        changeVis('cushioning_boss_01_fake', false);
        changeVis('cushioning_boss_01_verdadero', true);

        operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 18900, 19040, 'AUTO', 1,
                function() {
          changeVis('piston_washer_02_fake', false);
          changeVis('piston_washer_02_verdadero', true);

          operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 19040, 19640, 'AUTO', 1,
                  function() {
            changeVis('cushioning_boss_mov_fake', false);
            changeVis('threaded_coupling_mov_fake', false);
            changeVis('cushioning_boss_mov_verdadero', true);
            changeVis('threaded_coupling_mov_verdadero', true);

            operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 19640, 19740, 'AUTO', 1,
                    function() {
              setHTMLElemStyle('display', 'none', 'icon_substep__4_11', false);
              setHTMLElemStyle('display', 'initial', 'checked_icon_substep__4_11', false);
              setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et4__12', false);
              is_et4__11 = false;
            }, false);

                }, false);

              }, false);

            }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et4__12', false, function(event) {
  is_et4__12 = true;
  outline('Plane', 'ENABLE');
  setHTMLElemStyle('display', 'none', 'note__4_11', false);
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et4__12', false);
  setHTMLElemStyle('color', '#1e85c9', 'et4__12', false);
  registerOnClick('Plane', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et4__12 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 19740, 20400, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__4_12', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__4_12', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et4__13', false);
        is_et4__12 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et4__13', false, function(event) {
  is_et4__13 = true;
  outline('torquimetro_caratula', 'ENABLE');
  setHTMLElemStyle('display', 'flex', 'note__4_13', false);
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et4__13', false);
  setHTMLElemStyle('color', '#1e85c9', 'et4__13', false);
  registerOnClick('torquimetro_caratula', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et4__13 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 20400, 21030, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__4_13', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__4_13', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et4__14', false);
        is_et4__13 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et4__14', false, function(event) {
  is_et4__14 = true;
  setHTMLElemStyle('display', 'none', 'note__4_13', false);
  setHTMLElemStyle('display', 'flex', 'note__4_14', false);
  outline('piston_rod_round', 'ENABLE');
  outline('piston_washer_02_fake', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et4__14', false);
  setHTMLElemStyle('color', '#1e85c9', 'et4__14', false);
  registerOnClick('piston_rod_round', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et4__14 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 21030, 22780, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__4_14', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__4_14', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et4__15', false);
        is_et4__14 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et4__15', false, function(event) {
  is_et4__15 = true;
  setHTMLElemStyle('display', 'none', 'note__4_14', false);
  setHTMLElemStyle('display', 'flex', 'note__4_15', false);
  outline('cylinder_barrel', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et4__15', false);
  setHTMLElemStyle('color', '#1e85c9', 'et4__15', false);
  registerOnClick('cylinder_barrel', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et4__15 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 22780, 23440, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__4_15', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__4_15', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'btn__etapa5', false);
        setHTMLElemStyle('backgroundColor', '#1E4055', 'btn__etapa4', false);
        setHTMLElemStyle('color', '#fafafa', 'btn__etapa4', false);
        is_et4__15 = false;
        fin_etapa4 = true;
      }, false);

          }
  }, function() {});
});

eventHTMLElem('click', 'et5__1', false, function(event) {
  is_et5__1 = true;
  setHTMLElemStyle('display', 'flex', 'note__5_1', false);
  outline('piston_rod_round', 'ENABLE');
  outline('piston_washer_02_fake', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et5__1', false);
  setHTMLElemStyle('color', '#1e85c9', 'et5__1', false);
  registerOnClick('piston_rod_round', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et5__1 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 23440, 24320, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__5_1', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__5_1', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et5__2', false);
        is_et5__1 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et5__2', false, function(event) {
  is_et5__2 = true;
  setHTMLElemStyle('display', 'none', 'note__5_1', false);
  setHTMLElemStyle('display', 'flex', 'note__5_2', false);
  outline('bearing_cap', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et5__2', false);
  setHTMLElemStyle('color', '#1e85c9', 'et5__2', false);
  registerOnClick('bearing_cap', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et5__2 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 24320, 24660, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__5_2', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__5_2', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et5__3', false);
        is_et5__2 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et5__3', false, function(event) {
  is_et5__3 = true;
  setHTMLElemStyle('display', 'none', 'note__5_2', false);
  outline('panhuelo', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et5__3', false);
  setHTMLElemStyle('color', '#1e85c9', 'et5__3', false);
  registerOnClick('panhuelo', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et5__3 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 24660, 25040, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__5_3', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__5_3', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et5__4', false);
        is_et5__3 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et5__4', false, function(event) {
  is_et5__4 = true;
  outline('rear_bearing_cap', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et5__4', false);
  setHTMLElemStyle('color', '#1e85c9', 'et5__4', false);
  setHTMLElemStyle('display', 'flex', 'note__5_8', false);
  registerOnClick('rear_bearing_cap', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et5__4 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 25040, 25180, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__5_4', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__5_4', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et5__5', false);
        is_et5__4 = false;
      }, false);

          }
  }, function() {});
});

eventHTMLElem('click', 'et5__5', false, function(event) {
  is_et5__5 = true;
  outline('aceitero', 'ENABLE');
  setHTMLElemStyle('display', 'flex', 'note__5_5', false);
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et5__5', false);
  setHTMLElemStyle('color', '#1e85c9', 'et5__5', false);
  registerOnClick('aceitero', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et5__5 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 25180, 25480, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__5_5', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__5_5', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et5__6', false);
        is_et5__5 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et5__6', false, function(event) {
  setHTMLElemStyle('display', 'none', 'note__5_5', false);
  is_et5__6 = true;
  outline('Flage_screw_01', 'ENABLE');
  outline('Flage_screw_02', 'ENABLE');
  outline('Flage_screw_03', 'ENABLE');
  outline('Flage_screw_04', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et5__6', false);
  setHTMLElemStyle('color', '#1e85c9', 'et5__6', false);
  registerOnClick('Flage_screw_01', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et5__6 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 25480, 25960, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__5_6', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__5_6', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et5__7', false);
        is_et5__6 = false;
      }, false);

          }
  }, function() {});
  registerOnClick('Flage_screw_02', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et5__6 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 25480, 25960, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__5_6', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__5_6', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et5__7', false);
        is_et5__6 = false;
      }, false);

          }
  }, function() {});
  registerOnClick('Flage_screw_03', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et5__6 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 25480, 25960, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__5_6', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__5_6', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et5__7', false);
        is_et5__6 = false;
      }, false);

          }
  }, function() {});
  registerOnClick('Flage_screw_04', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et5__6 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 25480, 25960, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__5_6', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__5_6', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et5__7', false);
        is_et5__6 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et5__7', false, function(event) {
  is_et5__7 = true;
  outline('Flage_screw_05', 'ENABLE');
  outline('Flage_screw_06', 'ENABLE');
  outline('Flage_screw_07', 'ENABLE');
  outline('Flage_screw_08', 'ENABLE');
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et5__7', false);
  setHTMLElemStyle('color', '#1e85c9', 'et5__7', false);
  registerOnClick('Flage_screw_05', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et5__7 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 25960, 26520, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__5_7', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__5_7', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et5__8', false);
        is_et5__7 = false;
      }, false);

          }
  }, function() {});
  registerOnClick('Flage_screw_06', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et5__7 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 25960, 26520, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__5_7', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__5_7', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et5__8', false);
        is_et5__7 = false;
      }, false);

          }
  }, function() {});
  registerOnClick('Flage_screw_07', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et5__7 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 25960, 26520, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__5_7', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__5_7', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et5__8', false);
        is_et5__7 = false;
      }, false);

          }
  }, function() {});
  registerOnClick('Flage_screw_08', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et5__7 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 25960, 26520, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__5_7', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__5_7', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et5__8', false);
        is_et5__7 = false;
      }, false);

          }
  }, function() {});
});
eventHTMLElem('click', 'et5__8', false, function(event) {
  is_et5__8 = true;
  outline('torque_spanner', 'ENABLE');
  setHTMLElemStyle('display', 'none', 'note__5_2', false);
  setHTMLElemStyle('display', 'flex', 'note__5_8', false);
  setHTMLElemAttribute('style', 'pointer-events: none; ', 'et5__8', false);
  setHTMLElemStyle('color', '#1e85c9', 'et5__8', false);
  registerOnClick('torque_spanner', false, false, [0,1,2], function() {
    outline(['ALL_OBJECTS'], 'DISABLE');
    if (is_et5__8 == true) {

      operateAnimation('PLAY', getAnimations(['GROUP', 'Controladores']), 26520, 27100, 'AUTO', 1,
              function() {
        setHTMLElemStyle('display', 'none', 'icon_substep__5_8', false);
        setHTMLElemStyle('display', 'initial', 'checked_icon_substep__5_8', false);
        setHTMLElemAttribute('style', 'pointer-events: initial; ', 'et5__9', false);
        setHTMLElemStyle('backgroundColor', '#1E4055', 'btn__etapa5', false);
        setHTMLElemStyle('color', '#fafafa', 'btn__etapa5', false);
        is_et5__8 = false;
        fin_etapa5 = true;
      }, false);

          }
  }, function() {});
});



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
