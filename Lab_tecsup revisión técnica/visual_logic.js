/**
 * Generated by Verge3D Puzzles v.4.0.1
 * Mon Oct 10 2022 12:47:14 GMT-0500 (hora estándar de Perú)
 * Prefer not editing this file as your changes may get overridden once Puzzles are saved.
 * Check out https://www.soft8soft.com/docs/manual/en/introduction/Using-JavaScript.html
 * for the information on how to add your own JavaScript to Verge3D apps.
 */

'use strict';

(function() {

// global variables/constants used by puzzles' functions

var LIST_NONE = '<none>';

var _pGlob = {};

_pGlob.objCache = {};
_pGlob.fadeAnnotations = true;
_pGlob.pickedObject = '';
_pGlob.hoveredObject = '';
_pGlob.mediaElements = {};
_pGlob.loadedFile = '';
_pGlob.states = [];
_pGlob.percentage = 0;
_pGlob.openedFile = '';
_pGlob.xrSessionAcquired = false;
_pGlob.xrSessionCallbacks = [];
_pGlob.screenCoords = new v3d.Vector2();
_pGlob.intervalTimers = {};

_pGlob.AXIS_X = new v3d.Vector3(1, 0, 0);
_pGlob.AXIS_Y = new v3d.Vector3(0, 1, 0);
_pGlob.AXIS_Z = new v3d.Vector3(0, 0, 1);
_pGlob.MIN_DRAG_SCALE = 10e-4;
_pGlob.SET_OBJ_ROT_EPS = 1e-8;

_pGlob.vec2Tmp = new v3d.Vector2();
_pGlob.vec2Tmp2 = new v3d.Vector2();
_pGlob.vec3Tmp = new v3d.Vector3();
_pGlob.vec3Tmp2 = new v3d.Vector3();
_pGlob.vec3Tmp3 = new v3d.Vector3();
_pGlob.vec3Tmp4 = new v3d.Vector3();
_pGlob.eulerTmp = new v3d.Euler();
_pGlob.eulerTmp2 = new v3d.Euler();
_pGlob.quatTmp = new v3d.Quaternion();
_pGlob.quatTmp2 = new v3d.Quaternion();
_pGlob.colorTmp = new v3d.Color();
_pGlob.mat4Tmp = new v3d.Matrix4();
_pGlob.planeTmp = new v3d.Plane();
_pGlob.raycasterTmp = new v3d.Raycaster();

var PL = v3d.PL = v3d.PL || {};

// a more readable alias for PL (stands for "Puzzle Logic")
v3d.puzzles = PL;

PL.procedures = PL.procedures || {};




PL.execInitPuzzles = function(options) {
    // always null, should not be available in "init" puzzles
    var appInstance = null;
    // app is more conventional than appInstance (used in exec script and app templates)
    var app = null;

    var _initGlob = {};
    _initGlob.percentage = 0;
    _initGlob.output = {
        initOptions: {
            fadeAnnotations: true,
            useBkgTransp: false,
            preserveDrawBuf: false,
            useCompAssets: false,
            useFullscreen: true,
            useCustomPreloader: false,
            preloaderStartCb: function() {},
            preloaderProgressCb: function() {},
            preloaderEndCb: function() {},
        }
    }

    // provide the container's id to puzzles that need access to the container
    _initGlob.container = options !== undefined && 'container' in options
            ? options.container : "";

    

    var PROC = {
    
};

// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}

// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if ((attr == 'href' || attr == 'src') && value instanceof Promise) {
            // resolve promise value for url-based attributes
            value.then(function(response) {
                elem[attr] = response;
            });
        } else {
            elem[attr] = value;
        }
    }
}

// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}

function MediaHTML5(isVideo) {
    this.source = null;
}

Object.assign(MediaHTML5.prototype, {

    load: function(url, isVideo) {
        if (isVideo) {
            this.source = document.createElement('video');
            this.source.playsInline = true;
            this.source.preload = 'auto';
            this.source.autoload = true;
            this.source.crossOrigin = 'anonymous';
        } else {
            this.source = document.createElement('audio');
        }

        this.source.src = url;
        return this;
    },

    play: function() {
        this.source.play();
    },

    pause: function() {
        this.source.pause();
    },

    stop: function() {
        this.source.pause();
        this.source.currentTime = 0;
    },

    rewind: function() {
        this.source.currentTime = 0;
    },

    setPlaybackTime: function(time) {
        this.source.currentTime = time
    },

    getPlaybackTime: function() {
        return this.source.currentTime;
    },

    setPlaybackRate: function(rate) {
        this.source.playbackRate = rate;
    },

    isPlaying: function() {
        return this.source.duration > 0 && !this.source.paused;
    },

    setLoop: function(looped) {
        this.source.loop = looped;
    },

    setVolume: function(volume) {
        this.source.volume = volume;
    },

    setMuted: function(muted) {
        this.source.muted = muted;
    },

});

// loadMedia puzzle
function loadMedia_HTML5(url) {

    var elems = _pGlob.mediaElements;
    if (!(url in elems)) {
        elems[url] = new MediaHTML5().load(url);
    }
    return elems[url];
}

// playSound puzzle
function playSound(mediaElem, loop) {
    if (!mediaElem)
        return;
    mediaElem.setLoop(loop);
    mediaElem.play();
}

// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, eventType, callback]);
    }
}

// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}



// initSettings puzzle
_initGlob.output.initOptions.fadeAnnotations = true;
_initGlob.output.initOptions.useBkgTransp = false;
_initGlob.output.initOptions.preserveDrawBuf = true;
_initGlob.output.initOptions.useCompAssets = false;
_initGlob.output.initOptions.useFullscreen = false;


// initPreloader puzzle
_initGlob.output.initOptions.useCustomPreloader = true;
_initGlob.output.initOptions.preloaderStartCb = function() {
    _initGlob.percentage = 0;
    (function() {})();
};
_initGlob.output.initOptions.preloaderProgressCb = function(percentage) {
    _initGlob.percentage = percentage;
    (function() {
  setHTMLElemAttribute('innerHTML', String(Math.round(_initGlob.percentage)) + '%', 'percentage', false);
  setHTMLElemAttribute('style', ['stroke-dashoffset: ',472 - (472 * Math.round(_initGlob.percentage)) / 100,';'].join(''), 'circle', false);
})();
};
_initGlob.output.initOptions.preloaderEndCb = function() {
    _initGlob.percentage = 100;
    (function() {
  setHTMLElemStyle('display', 'none', 'preloader_screen', false);
  registerSetTimeout(0.5, function() {
    setHTMLElemStyle('display', 'flex', 'demo-modal', false);
    setHTMLElemStyle('background', 'rgba(0,0,0,.5)', 'demo-modal', false);
    eventHTMLElem('click', 'btn_reproducir_info', false, function(event) {
      playSound(loadMedia_HTML5('./audio/audio-informacion.mp3'), false);
    });
  });
})();
};

    return _initGlob.output;
}

PL.init = function(appInstance, initOptions) {

// app is more conventional than appInstance (used in exec script and app templates)
var app = appInstance;

initOptions = initOptions || {};

if ('fadeAnnotations' in initOptions) {
    _pGlob.fadeAnnotations = initOptions.fadeAnnotations;
}

this.procedures["ocultar_objetos"] = ocultar_objetos;
this.procedures["cambiar_color_btn_act"] = cambiar_color_btn_act;
this.procedures["mostrar_todos_objetos"] = mostrar_todos_objetos;
this.procedures["reproducir_video_microscopio"] = reproducir_video_microscopio;
this.procedures["bind_element"] = bind_element;
this.procedures["unbind_element"] = unbind_element;
this.procedures["cambio_texturas"] = cambio_texturas;
this.procedures["cambiar_textura_ciguenal_1"] = cambiar_textura_ciguenal_1;
this.procedures["cambiar_textura_piston_2"] = cambiar_textura_piston_2;
this.procedures["cambiar_textura_bomba_3"] = cambiar_textura_bomba_3;
this.procedures["cambiar_textura_pin_4"] = cambiar_textura_pin_4;
this.procedures["cambiar_textura_camisa_5"] = cambiar_textura_camisa_5;

var PROC = {
    "ocultar_objetos": ocultar_objetos,
    "cambiar_color_btn_act": cambiar_color_btn_act,
    "mostrar_todos_objetos": mostrar_todos_objetos,
    "reproducir_video_microscopio": reproducir_video_microscopio,
    "bind_element": bind_element,
    "unbind_element": unbind_element,
    "cambio_texturas": cambio_texturas,
    "cambiar_textura_ciguenal_1": cambiar_textura_ciguenal_1,
    "cambiar_textura_piston_2": cambiar_textura_piston_2,
    "cambiar_textura_bomba_3": cambiar_textura_bomba_3,
    "cambiar_textura_pin_4": cambiar_textura_pin_4,
    "cambiar_textura_camisa_5": cambiar_textura_camisa_5,
};

var is_playing_info, obj_mostrar, obj_ocultar1, obj_ocultar2, obj_ocultar3, obj_ocultar4, ft_etapa1, fin_etapa1, is_etapa1, btn_paso, video_microscopio_url, idElementoBind, idObjetoBind, idElementoUnbind, idObjetoUnbind, is_info_ft, ft_etapa2, fin_etapa2, is_etapa2, is_etapa4, is_act1_6, ft_etapa3, fin_etapa3, is_etapa3, inspeccion__submenu, is_act2_1, is_act3_1, is_act4_1, is_act5_1, ft_etapa4, fin_etapa4, is_act1_5, selected, ft_etapa5, fin_etapa5, is_etapa5, is_act1_1, is_paused, is_act1_7, is_act2_2, is_act3_2, is_act4_2, is_act5_2, is_act1_2, is_act2_3, is_act2_4, is_act3_3, is_act3_4, is_act4_4, is_act5_3, is_act5_4, is_act1_3, is_act1_4, is_act2_5, is_act3_5, is_act4_3, is_act4_5, is_act5_5, is_act2_7, is_act3_7, is_act4_8, is_act5_7, is_act2_8, is_act3_8, is_act4_7, is_act5_8, is_act1_8, is_act2_6, is_act3_6, is_act4_6, is_act5_6, video_playback_time_1, video_playback_time, is_zoom_lupa1;

function MediaHTML5(isVideo) {
    this.source = null;
}

Object.assign(MediaHTML5.prototype, {

    load: function(url, isVideo) {
        if (isVideo) {
            this.source = document.createElement('video');
            this.source.playsInline = true;
            this.source.preload = 'auto';
            this.source.autoload = true;
            this.source.crossOrigin = 'anonymous';
        } else {
            this.source = document.createElement('audio');
        }

        this.source.src = url;
        return this;
    },

    play: function() {
        this.source.play();
    },

    pause: function() {
        this.source.pause();
    },

    stop: function() {
        this.source.pause();
        this.source.currentTime = 0;
    },

    rewind: function() {
        this.source.currentTime = 0;
    },

    setPlaybackTime: function(time) {
        this.source.currentTime = time
    },

    getPlaybackTime: function() {
        return this.source.currentTime;
    },

    setPlaybackRate: function(rate) {
        this.source.playbackRate = rate;
    },

    isPlaying: function() {
        return this.source.duration > 0 && !this.source.paused;
    },

    setLoop: function(looped) {
        this.source.loop = looped;
    },

    setVolume: function(volume) {
        this.source.volume = volume;
    },

    setMuted: function(muted) {
        this.source.muted = muted;
    },

});

// loadMedia puzzle
function loadMedia_HTML5(url) {

    var elems = _pGlob.mediaElements;
    if (!(url in elems)) {
        elems[url] = new MediaHTML5().load(url);
    }
    return elems[url];
}

// playSound puzzle
function playSound(mediaElem, loop) {
    if (!mediaElem)
        return;
    mediaElem.setLoop(loop);
    mediaElem.play();
}

// utility functions envoked by the HTML puzzles
function getElements(ids, isParent) {
    var elems = [];
    if (Array.isArray(ids) && ids[0] != 'CONTAINER' && ids[0] != 'WINDOW' &&
        ids[0] != 'DOCUMENT' && ids[0] != 'BODY' && ids[0] != 'QUERYSELECTOR') {
        for (var i = 0; i < ids.length; i++)
            elems.push(getElement(ids[i], isParent));
    } else {
        elems.push(getElement(ids, isParent));
    }
    return elems;
}

function getElement(id, isParent) {
    var elem;
    if (Array.isArray(id) && id[0] == 'CONTAINER') {
        if (appInstance !== null) {
            elem = appInstance.container;
        } else if (typeof _initGlob !== 'undefined') {
            // if we are on the initialization stage, we still can have access
            // to the container element
            var id = _initGlob.container;
            if (isParent) {
                elem = parent.document.getElementById(id);
            } else {
                elem = document.getElementById(id);
            }
        }
    } else if (Array.isArray(id) && id[0] == 'WINDOW') {
        if (isParent)
            elem = parent;
        else
            elem = window;
    } else if (Array.isArray(id) && id[0] == 'DOCUMENT') {
        if (isParent)
            elem = parent.document;
        else
            elem = document;
    } else if (Array.isArray(id) && id[0] == 'BODY') {
        if (isParent)
            elem = parent.document.body;
        else
            elem = document.body;
    } else if (Array.isArray(id) && id[0] == 'QUERYSELECTOR') {
        if (isParent)
            elem = parent.document.querySelector(id);
        else
            elem = document.querySelector(id);
    } else {
        if (isParent)
            elem = parent.document.getElementById(id);
        else
            elem = document.getElementById(id);
    }
    return elem;
}

// setHTMLElemStyle puzzle
function setHTMLElemStyle(prop, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem || !elem.style)
            continue;
        elem.style[prop] = value;
    }
}

// setTimeout puzzle
function registerSetTimeout(timeout, callback) {
    window.setTimeout(callback, 1000 * timeout);
}

// eventHTMLElem puzzle
function eventHTMLElem(eventType, ids, isParent, callback) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem)
            continue;
        elem.addEventListener(eventType, callback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, eventType, callback]);
    }
}

// setHTMLElemAttribute puzzle
function setHTMLElemAttribute(attr, value, ids, isParent) {
    var elems = getElements(ids, isParent);
    for (var i = 0; i < elems.length; i++) {
        var elem = elems[i];
        if (!elem) continue;

        if ((attr == 'href' || attr == 'src') && value instanceof Promise) {
            // resolve promise value for url-based attributes
            value.then(function(response) {
                elem[attr] = response;
            });
        } else {
            elem[attr] = value;
        }
    }
}

/**
 * Get a scene that contains the root of the given action.
 */
function getSceneByAction(action) {
    var root = action.getRoot();
    var scene = root.type == "Scene" ? root : null;
    root.traverseAncestors(function(ancObj) {
        if (ancObj.type == "Scene") {
            scene = ancObj;
        }
    });
    return scene;
}

/**
 * Get the current scene's framerate.
 */
function getSceneAnimFrameRate(scene) {
    if (scene && 'animFrameRate' in scene.userData) {
        return scene.userData.animFrameRate;
    }
    return 24;
}

_pGlob.animMixerCallbacks = [];

var initAnimationMixer = function() {

    function onMixerFinished(e) {
        var cb = _pGlob.animMixerCallbacks;
        var found = [];
        for (var i = 0; i < cb.length; i++) {
            if (cb[i][0] == e.action) {
                cb[i][0] = null; // desactivate
                found.push(cb[i][1]);
            }
        }
        for (var i = 0; i < found.length; i++) {
            found[i]();
        }
    }

    return function initAnimationMixer() {
        if (appInstance.mixer && !appInstance.mixer.hasEventListener('finished', onMixerFinished))
            appInstance.mixer.addEventListener('finished', onMixerFinished);
    };

}();

// animation puzzles
function operateAnimation(operation, animations, from, to, loop, speed, callback, rev) {
    if (!animations)
        return;
    // input can be either single obj or array of objects
    if (typeof animations == "string")
        animations = [animations];

    function processAnimation(animName) {
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, animName);
        if (!action)
            return;
        switch (operation) {
        case 'PLAY':
            if (!action.isRunning()) {
                action.reset();
                if (loop && (loop != "AUTO"))
                    action.loop = v3d[loop];
                var scene = getSceneByAction(action);
                var frameRate = getSceneAnimFrameRate(scene);

                action.repetitions = Infinity;

                var timeScale = Math.abs(parseFloat(speed));
                if (rev)
                    timeScale *= -1;

                action.timeScale = timeScale;
                action.timeStart = from !== null ? from/frameRate : 0;
                if (to !== null) {
                    action.getClip().duration = to/frameRate;
                } else {
                    action.getClip().resetDuration();
                }
                action.time = timeScale >= 0 ? action.timeStart : action.getClip().duration;

                action.paused = false;
                action.play();

                // push unique callbacks only
                var callbacks = _pGlob.animMixerCallbacks;
                var found = false;

                for (var j = 0; j < callbacks.length; j++)
                    if (callbacks[j][0] == action && callbacks[j][1] == callback)
                        found = true;

                if (!found)
                    _pGlob.animMixerCallbacks.push([action, callback]);
            }
            break;
        case 'STOP':
            action.stop();

            // remove callbacks
            var callbacks = _pGlob.animMixerCallbacks;
            for (var j = 0; j < callbacks.length; j++)
                if (callbacks[j][0] == action) {
                    callbacks.splice(j, 1);
                    j--
                }

            break;
        case 'PAUSE':
            action.paused = true;
            break;
        case 'RESUME':
            action.paused = false;
            break;
        case 'SET_FRAME':
            var scene = getSceneByAction(action);
            var frameRate = getSceneAnimFrameRate(scene);
            action.time = from ? from/frameRate : 0;
            action.play();
            action.paused = true;
            break;
        case 'SET_SPEED':
            var timeScale = parseFloat(speed);
            action.timeScale = rev ? -timeScale : timeScale;
            break;
        }
    }

    for (var i = 0; i < animations.length; i++) {
        var animName = animations[i];
        if (animName)
            processAnimation(animName);
    }

    initAnimationMixer();
}

// utility function envoked by almost all V3D-specific puzzles
// filter off some non-mesh types
function notIgnoredObj(obj) {
    return obj.type !== 'AmbientLight' &&
           obj.name !== '' &&
           !(obj.isMesh && obj.isMaterialGeneratedMesh) &&
           !obj.isAuxClippingMesh;
}


// utility function envoked by almost all V3D-specific puzzles
// find first occurence of the object by its name
function getObjectByName(objName) {
    var objFound;
    var runTime = _pGlob !== undefined;
    objFound = runTime ? _pGlob.objCache[objName] : null;

    if (objFound && objFound.name === objName)
        return objFound;

    if (appInstance.scene) {
        appInstance.scene.traverse(function(obj) {
            if (!objFound && notIgnoredObj(obj) && (obj.name == objName)) {
                objFound = obj;
                if (runTime) {
                    _pGlob.objCache[objName] = objFound;
                }
            }
        });
    }
    return objFound;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects on the scene
function getAllObjectNames() {
    var objNameList = [];
    appInstance.scene.traverse(function(obj) {
        if (notIgnoredObj(obj))
            objNameList.push(obj.name)
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// retrieve all objects which belong to the group
function getObjectNamesByGroupName(targetGroupName) {
    var objNameList = [];
    appInstance.scene.traverse(function(obj){
        if (notIgnoredObj(obj)) {
            var groupNames = obj.groupNames;
            if (!groupNames)
                return;
            for (var i = 0; i < groupNames.length; i++) {
                var groupName = groupNames[i];
                if (groupName == targetGroupName) {
                    objNameList.push(obj.name);
                }
            }
        }
    });
    return objNameList;
}


// utility function envoked by almost all V3D-specific puzzles
// process object input, which can be either single obj or array of objects, or a group
function retrieveObjectNames(objNames) {
    var acc = [];
    retrieveObjectNamesAcc(objNames, acc);
    return acc.filter(function(name) {
        return name;
    });
}

function retrieveObjectNamesAcc(currObjNames, acc) {
    if (typeof currObjNames == "string") {
        acc.push(currObjNames);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "GROUP") {
        var newObj = getObjectNamesByGroupName(currObjNames[1]);
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames) && currObjNames[0] == "ALL_OBJECTS") {
        var newObj = getAllObjectNames();
        for (var i = 0; i < newObj.length; i++)
            acc.push(newObj[i]);
    } else if (Array.isArray(currObjNames)) {
        for (var i = 0; i < currObjNames.length; i++)
            retrieveObjectNamesAcc(currObjNames[i], acc);
    }
}

/**
 * Retrieve coordinate system from the loaded scene
 */
function getCoordSystem() {
    var scene = appInstance.scene;

    if (scene && 'coordSystem' in scene.userData) {
        return scene.userData.coordSystem;
    }

    return 'Y_UP_RIGHT';
}


/**
 * Transform coordinates from one space to another
 * Can be used with Vector3 or Euler.
 */
function coordsTransform(coords, from, to, noSignChange) {

    if (from == to)
        return coords;

    var y = coords.y, z = coords.z;

    if (from == 'Z_UP_RIGHT' && to == 'Y_UP_RIGHT') {
        coords.y = z;
        coords.z = noSignChange ? y : -y;
    } else if (from == 'Y_UP_RIGHT' && to == 'Z_UP_RIGHT') {
        coords.y = noSignChange ? z : -z;
        coords.z = y;
    } else {
        console.error('coordsTransform: Unsupported coordinate space');
    }

    return coords;
}


/**
 * Verge3D euler rotation to Blender/Max shortest.
 * 1) Convert from intrinsic rotation (v3d) to extrinsic XYZ (Blender/Max default
 *    order) via reversion: XYZ -> ZYX
 * 2) swizzle ZYX->YZX
 * 3) choose the shortest rotation to resemble Blender's behavior
 */
var eulerV3DToBlenderShortest = function() {

    var eulerTmp = new v3d.Euler();
    var eulerTmp2 = new v3d.Euler();
    var vec3Tmp = new v3d.Vector3();

    return function(euler, dest) {

        var eulerBlender = eulerTmp.copy(euler).reorder('YZX');
        var eulerBlenderAlt = eulerTmp2.copy(eulerBlender).makeAlternative();

        var len = eulerBlender.toVector3(vec3Tmp).lengthSq();
        var lenAlt = eulerBlenderAlt.toVector3(vec3Tmp).lengthSq();

        dest.copy(len < lenAlt ? eulerBlender : eulerBlenderAlt);
        return coordsTransform(dest, 'Y_UP_RIGHT', 'Z_UP_RIGHT');
    }

}();

// tweenCamera puzzle
function tweenCamera(posOrObj, targetOrObj, duration, doSlot, movementType) {
    var camera = appInstance.getCamera();

    if (Array.isArray(posOrObj)) {
        var worldPos = _pGlob.vec3Tmp.fromArray(posOrObj);
        worldPos = coordsTransform(worldPos, getCoordSystem(), 'Y_UP_RIGHT');
    } else if (posOrObj) {
        var posObj = getObjectByName(posOrObj);
        if (!posObj) return;
        var worldPos = posObj.getWorldPosition(_pGlob.vec3Tmp);
    } else {
        // empty input means: don't change the position
        var worldPos = camera.getWorldPosition(_pGlob.vec3Tmp);
    }

    if (Array.isArray(targetOrObj)) {
        var worldTarget = _pGlob.vec3Tmp2.fromArray(targetOrObj);
        worldTarget = coordsTransform(worldTarget, getCoordSystem(), 'Y_UP_RIGHT');
    } else {
        var targObj = getObjectByName(targetOrObj);
        if (!targObj) return;
        var worldTarget = targObj.getWorldPosition(_pGlob.vec3Tmp2);
    }

    duration = Math.max(0, duration);

    if (appInstance.controls && appInstance.controls.tween) {
        // orbit and flying cameras
        if (!appInstance.controls.inTween) {
            appInstance.controls.tween(worldPos, worldTarget, duration, doSlot,
                    movementType);
        }
    } else {
        // TODO: static camera, just position it for now
        if (camera.parent) {
            camera.parent.worldToLocal(worldPos);
        }
        camera.position.copy(worldPos);
        camera.lookAt(worldTarget);
        doSlot();
    }
}

// show and hide puzzles
function changeVis(objSelector, bool) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        obj.visible = bool;
        obj.resolveMultiMaterial().forEach(function(objR) {
            objR.visible = bool;
        });
    }
}

// Describe this function...
function ocultar_objetos(obj_mostrar, obj_ocultar1, obj_ocultar2, obj_ocultar3, obj_ocultar4) {
  changeVis(obj_mostrar, true);
  changeVis(obj_ocultar1, false);
  changeVis(obj_ocultar2, false);
  changeVis(obj_ocultar3, false);
  changeVis(obj_ocultar4, false);
}

// outline puzzle
function outline(objSelector, doWhat) {
    var objNames = retrieveObjectNames(objSelector);

    if (!appInstance.postprocessing || !appInstance.postprocessing.outlinePass)
        return;
    var outlineArray = appInstance.postprocessing.outlinePass.selectedObjects;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        var obj = getObjectByName(objName);
        if (!obj)
            continue;
        if (doWhat == "ENABLE") {
            if (outlineArray.indexOf(obj) == -1)
                outlineArray.push(obj);
        } else {
            var index = outlineArray.indexOf(obj);
            if (index > -1)
                outlineArray.splice(index, 1);
        }
    }
}

// getObjectMaterial puzzle
function getObjectMaterial(objSelector) {
    var objNames = retrieveObjectNames(objSelector);

    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i]
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (!obj)
            continue;

        obj = obj.resolveMultiMaterial()[0];

        if (obj.material && typeof obj.material.name == "string")
            return obj.material.name;
    }
    return '';
}

// utility function used by the whenClicked, whenHovered and whenDraggedOver puzzles
function initObjectPicking(callback, eventType, mouseDownUseTouchStart, mouseButtons) {

    var elem = appInstance.renderer.domElement;
    elem.addEventListener(eventType, pickListener);
    if (v3d.PL.editorEventListeners)
        v3d.PL.editorEventListeners.push([elem, eventType, pickListener]);

    if (eventType == 'mousedown') {

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, pickListener);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, pickListener]);

    } else if (eventType == 'dblclick') {

        var prevTapTime = 0;

        function doubleTapCallback(event) {

            var now = new Date().getTime();
            var timesince = now - prevTapTime;

            if (timesince < 600 && timesince > 0) {

                pickListener(event);
                prevTapTime = 0;
                return;

            }

            prevTapTime = new Date().getTime();
        }

        var touchEventName = mouseDownUseTouchStart ? 'touchstart' : 'touchend';
        elem.addEventListener(touchEventName, doubleTapCallback);
        if (v3d.PL.editorEventListeners)
            v3d.PL.editorEventListeners.push([elem, touchEventName, doubleTapCallback]);
    }

    var raycaster = new v3d.Raycaster();

    function pickListener(event) {

        // to handle unload in loadScene puzzle
        if (!appInstance.getCamera())
            return;

        event.preventDefault();

        var xNorm = 0, yNorm = 0;
        if (event instanceof MouseEvent) {
            if (mouseButtons && mouseButtons.indexOf(event.button) == -1)
                return;
            xNorm = event.offsetX / elem.clientWidth;
            yNorm = event.offsetY / elem.clientHeight;
        } else if (event instanceof TouchEvent) {
            var rect = elem.getBoundingClientRect();
            xNorm = (event.changedTouches[0].clientX - rect.left) / rect.width;
            yNorm = (event.changedTouches[0].clientY - rect.top) / rect.height;
        }

        _pGlob.screenCoords.x = xNorm * 2 - 1;
        _pGlob.screenCoords.y = -yNorm * 2 + 1;
        raycaster.setFromCamera(_pGlob.screenCoords, appInstance.getCamera(true));
        var objList = [];
        appInstance.scene.traverse(function(obj){objList.push(obj);});
        var intersects = raycaster.intersectObjects(objList, false);
        callback(intersects, event);
    }
}

function objectsIncludeObj(objNames, testedObjName) {
    if (!testedObjName) return false;

    for (var i = 0; i < objNames.length; i++) {
        if (testedObjName == objNames[i]) {
            return true;
        } else {
            // also check children which are auto-generated for multi-material objects
            var obj = getObjectByName(objNames[i]);
            if (obj && obj.type == "Group") {
                for (var j = 0; j < obj.children.length; j++) {
                    if (testedObjName == obj.children[j].name) {
                        return true;
                    }
                }
            }
        }
    }
    return false;
}

// utility function used by the whenClicked, whenHovered, whenDraggedOver, and raycast puzzles
function getPickedObjectName(obj) {
    // auto-generated from a multi-material object, use parent name instead
    if (obj.isMesh && obj.isMaterialGeneratedMesh && obj.parent) {
        return obj.parent.name;
    } else {
        return obj.name;
    }
}

// whenClicked puzzle
function registerOnClick(objSelector, xRay, doubleClick, mouseButtons, cbDo, cbIfMissedDo) {

    // for AR/VR
    _pGlob.objClickInfo = _pGlob.objClickInfo || [];

    _pGlob.objClickInfo.push({
        objSelector: objSelector,
        callbacks: [cbDo, cbIfMissedDo]
    });

    initObjectPicking(function(intersects, event) {

        var isPicked = false;

        var maxIntersects = xRay ? intersects.length : Math.min(1, intersects.length);

        for (var i = 0; i < maxIntersects; i++) {
            var obj = intersects[i].object;
            var objName = getPickedObjectName(obj);
            var objNames = retrieveObjectNames(objSelector);

            if (objectsIncludeObj(objNames, objName)) {
                // save the object for the pickedObject block
                _pGlob.pickedObject = objName;
                isPicked = true;
                cbDo(event);
            }
        }

        if (!isPicked) {
            _pGlob.pickedObject = '';
            cbIfMissedDo(event);
        }

    }, doubleClick ? 'dblclick' : 'mousedown', false, mouseButtons);
}

// getAnimations puzzle
function getAnimations(objSelector) {
    var objNames = retrieveObjectNames(objSelector);

    var animations = [];
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        // use objName as animName - for now we have one-to-one match
        var action = v3d.SceneUtils.getAnimationActionByName(appInstance, objName);
        if (action)
            animations.push(objName);
    }
    return animations;
}

// Describe this function...
function cambiar_color_btn_act(btn_paso) {
  setHTMLElemStyle('backgroundColor', '#fafafa', btn_paso, false);
  setHTMLElemStyle('color', '#1e85c9', btn_paso, false);
}

var parseDataUriRe = /^data:(.+\/.+);base64,(.*)$/;

/**
 * Check if object is a Data URI string
 */
function checkDataUri(obj) {
    // NOTE: checking with parseDataUriRe is slow
    return (typeof obj === 'string' && obj.indexOf('data:') == 0);
}

/**
 * Check if object is a URI to a Blob object
 */
function checkBlobUri(obj) {
    return (typeof obj === 'string' && obj.indexOf('blob:') == 0);
}

/**
 * First we use encodeURIComponent to get percent-encoded UTF-8,
 * then we convert the percent encodings into raw bytes which can be fed into btoa
 * https://bit.ly/3dvpq60
 */
function base64EncodeUnicode(str) {
    return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g,
        function toSolidBytes(match, p1) {
            return String.fromCharCode('0x' + p1);
    }));
}

/**
 * Going backwards: from bytestream, to percent-encoding, to original string
 * https://bit.ly/3dvpq60
 */
function base64DecodeUnicode(str) {
    return decodeURIComponent(atob(str).split('').map(function(c) {
        return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
    }).join(''));
}

/**
 * Convert object or string to application/json Data URI
 */
function toJSONDataUri(obj) {
    if (typeof obj !== 'string')
        obj = JSON.stringify(obj);
    return 'data:application/json;base64,' + base64EncodeUnicode(obj);
}

/**
 * Convert object or string to application/json Data URI
 */
function toTextDataUri(obj) {
    if (typeof obj !== 'string')
        obj = JSON.stringify(obj);
    return 'data:text/plain;base64,' + base64EncodeUnicode(obj);
}

/**
 * Extract text data from Data URI
 */
function extractDataUriData(str) {
    var matches = str.match(parseDataUriRe);
    return base64DecodeUnicode(matches[2]);
}

// downloadFile puzzle
function downloadFile(contents, filename) {
    if (!filename)
        return;

    if (contents instanceof Promise) {

        contents.then(function(response) {

            doDownload(response, filename);

        }, function(error) {});

    } else {

        doDownload(contents, filename);

    }

    function doDownload(contents, filename) {
        if (typeof contents !== 'string') {
            contents = toJSONDataUri(contents);
        } else if (!checkDataUri(contents) && !checkBlobUri(contents)) {
            contents = toTextDataUri(contents);
        }

        var link = document.createElement('a');
        link.href = contents;
        link.download = filename;
        document.body.appendChild(link);
        link.click();
    }
}

function matGetValues(matName) {

    var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return [];

    if (mat.isMeshNodeMaterial)
        return Object.keys(mat.nodeValueMap);
    else if (mat.isMeshStandardMaterial)
        return ['metalness', 'roughness', 'bumpScale', 'emissiveIntensity', 'envMapIntensity'];
    else
        return [];
}

// setMaterialValue puzzle
function setMaterialValue(matName, valName, value) {

    var values = matGetValues(matName);
    if (values.indexOf(valName) < 0)
        return;

    var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);

    for (var i = 0; i < mats.length; i++) {
        var mat = mats[i];

        if (mat.isMeshNodeMaterial) {
            var valIdx = mat.nodeValueMap[valName];
            mat.nodeValue[valIdx] = Number(value);
        } else
            mat[valName] = Number(value);

        if (appInstance.scene !== null) {
            if (mat === appInstance.scene.worldMaterial) {
                appInstance.updateEnvironment(mat);
            }
        }
    }
}

// assignMaterial puzzle
function assignMat(objSelector, matName) {
    var objNames = retrieveObjectNames(objSelector);
    if (!matName)
        return;
    var mat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
    if (!mat)
        return;
    for (var i = 0; i < objNames.length; i++) {
        var objName = objNames[i];
        if (!objName)
            continue;
        var obj = getObjectByName(objName);
        if (obj) {
            var firstSubmesh = obj.resolveMultiMaterial()[0];
            firstSubmesh.material = mat;
        }
    }
}

// loadVideo puzzle
function loadVideo(url) {
    var elems = _pGlob.mediaElements;
    if (!(url in elems)) {
        elems[url] = new MediaHTML5().load(url, true);
    }
    return elems[url];
}

/**
 * Retreive standard accessible textures for MeshNodeMaterial or MeshStandardMaterial.
 * If "collectSameNameMats" is true then all materials in the scene with the given name will
 * be used for collecting textures, otherwise will be used only the first found material (default behavior).
 */
function matGetEditableTextures(matName, collectSameNameMats) {

    var mats = [];
    if (collectSameNameMats) {
        mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);
    } else {
        var firstMat = v3d.SceneUtils.getMaterialByName(appInstance, matName);
        if (firstMat !== null) {
            mats = [firstMat];
        }
    }

    var textures = mats.reduce(function(texArray, mat) {
        var matTextures = [];
        switch (mat.type) {
            case 'MeshNodeMaterial':
                matTextures = Object.values(mat.nodeTextures);
                break;

            case 'MeshStandardMaterial':
                matTextures = [
                    mat.map, mat.lightMap, mat.aoMap, mat.emissiveMap,
                    mat.bumpMap, mat.normalMap, mat.displacementMap,
                    mat.roughnessMap, mat.metalnessMap, mat.alphaMap, mat.envMap
                ]
                break;

            default:
                console.error('matGetEditableTextures: Unknown material type ' + mat.type);
                break;
        }

        Array.prototype.push.apply(texArray, matTextures);
        return texArray;
    }, []);

    return textures.filter(function(elem) {
        // check Texture type exactly
        return elem && (elem.constructor == v3d.Texture
                || elem.constructor == v3d.CompressedTexture
                || elem.constructor == v3d.DataTexture
                || elem.constructor == v3d.VideoTexture);
    });
}

/**
 * Replace accessible textures for MeshNodeMaterial or MeshStandardMaterial
 */
function matReplaceEditableTexture(mat, oldTex, newTex) {

    switch (mat.type) {
        case 'MeshNodeMaterial':
            for (var name in mat.nodeTextures) {
                if (mat.nodeTextures[name] == oldTex) {
                    mat.nodeTextures[name] = newTex;
                }
            }

            break;

        case 'MeshStandardMaterial':

            var texNames = ['map', 'lightMap', 'aoMap', 'emissiveMap',
                            'bumpMap', 'normalMap', 'displacementMap', 'roughnessMap',
                            'metalnessMap', 'alphaMap', 'envMap'];

            texNames.forEach(function(name) {
                if (mat[name] == oldTex) {
                    mat[name] = newTex;
                }
            });

            break;

        default:
            console.error('matReplaceEditableTexture: Unsupported material type ' + mat.type);
            break;
    }

    // inherit some save params
    newTex.encoding = oldTex.encoding;
    newTex.wrapS = oldTex.wrapS;
    newTex.wrapT = oldTex.wrapT;

}

// replaceTexture puzzle
function replaceTexture(matName, texName, texUrlOrElem, doCb) {

    const textures = matGetEditableTextures(matName, true).filter(function(elem) {
        return elem.name == texName;
    });

    if (!textures.length)
        return;

    const mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);

    if (texUrlOrElem instanceof Promise) {

        texUrlOrElem.then(function(response) {
           processImageUrl(response);
        }, function(error) {});

    } else if (typeof texUrlOrElem == 'string') {

        processImageUrl(texUrlOrElem);

    /**
     * NOTE: not checking for the MediaHTML5 constructor, because otherwise this
     * puzzle would always provide the code that's not needed most of the time
     */
    } else if (texUrlOrElem instanceof Object && texUrlOrElem.source
            instanceof HTMLVideoElement) {

        processVideo(texUrlOrElem.source);

    } else if (texUrlOrElem instanceof HTMLCanvasElement) {

        processCanvas(texUrlOrElem);

    } else {

        return;

    }

    function processImageUrl(url) {

        const isHDR = (url.search(/\.hdr$/) > 0);
        const isComp = (url.search(/\.ktx2/) > 0);

        let isCompOld = false;
        textures.forEach(function(elem) {
            if (elem.isCompressedTexture)
                isCompOld = true;
        });

        let loader;

        if (!isHDR && !isComp && !isCompOld) {
            loader = new v3d.ImageLoader();
            loader.setCrossOrigin('Anonymous');
        } else if (isComp) {
            loader = appInstance.loader.ktx2Loader;
            loader.setCrossOrigin('Anonymous');
        } else if (isCompOld) {
            loader = new v3d.TextureLoader();
            loader.setCrossOrigin('Anonymous');
        } else {
            loader = new v3d.FileLoader();
            loader.setResponseType('arraybuffer');
        }

        loader.load(url, function(loadedData) {

            textures.forEach(function(elem) {

                elem.dispose();

                if (!isHDR && !isComp && !isCompOld) {

                    elem.image = loadedData;

                } else if (isComp || isCompOld) {

                    mats.forEach(function(mat) {
                        loadedData.flipY = false;
                        loadedData.name = texName;
                        matReplaceEditableTexture(mat, elem, loadedData);
                        mat.needsUpdate = true;
                    });

                } else {

                    // parse loaded HDR buffer
                    var rgbeLoader = new v3d.RGBELoader();
                    var texData = rgbeLoader.parse(loadedData);

                    elem.image = {
                        data: texData.data,
                        width: texData.width,
                        height: texData.height
                    }

                    elem.magFilter = v3d.LinearFilter;
                    elem.minFilter = v3d.LinearFilter;
                    elem.generateMipmaps = false;
                    elem.isDataTexture = true;
                }

                // update world material if it is using this texture
                if (appInstance.scene !== null && appInstance.scene.worldMaterial !== null) {
                    var wMat = appInstance.scene.worldMaterial;
                    for (let texName in wMat.nodeTextures) {
                        if (wMat.nodeTextures[texName] == elem) {
                            appInstance.updateEnvironment(wMat);
                        }
                    }
                }
            });

            // exec once
            doCb();

        });
    }

    function processVideo(elem) {
        const videoTex = new v3d.VideoTexture(elem);
        videoTex.flipY = false;
        videoTex.name = texName;

        let videoAssigned = false;

        var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);
        mats.forEach(function(mat) {

            textures.forEach(function(tex) {
                matReplaceEditableTexture(mat, tex, videoTex);
            });

            mat.needsUpdate = true;
            // HACK: to assign new encoding in nodes, workaround for https://crbug.com/1256340
            if (mat.isMeshNodeMaterial)
                mat.updateNodeGraph();
            videoAssigned = true;
        });

        if (videoAssigned)
            doCb();

    }

    function processCanvas(elem) {
        const canvasTex = new v3d.CanvasTexture(elem);
        canvasTex.flipY = false;
        canvasTex.name = texName;

        let canvasAssigned = false;

        var mats = v3d.SceneUtils.getMaterialsByName(appInstance, matName);
        mats.forEach(function(mat) {

            textures.forEach(function(tex) {
                matReplaceEditableTexture(mat, tex, canvasTex);
            });

            mat.needsUpdate = true;
            canvasAssigned = true;
        });

        if (canvasAssigned) {

            if (v3d.PL) {
                v3d.PL.canvasTextures = v3d.PL.canvasTextures || {};
                v3d.PL.canvasTextures[canvasTex.image.id] = canvasTex;
            }

            doCb();
        }

    }
}

// pauseSound puzzle
function pauseSound(mediaElem) {
    if (!mediaElem)
        return;
    mediaElem.pause();
}

// getPlaybackTime puzzle
function getPlaybackTime(mediaElem) {
    if (!mediaElem)
        return false;
    return mediaElem.getPlaybackTime();
}

// setPlaybackTime puzzle
function setPlaybackTime(mediaElem, time) {
    if (!mediaElem)
        return;

    time = Number(time);
    if (Number.isNaN(time)) {
        return;
    }

    mediaElem.setPlaybackTime(time);
}

// Describe this function...
function mostrar_todos_objetos() {
  changeVis('ciguenal abracion', true);
  changeVis('piston desgaste adesibo', true);
  changeVis('erosion por contaminacion', true);
  changeVis('tubo chiquito fatiga por contactor por rodadura', true);
  changeVis('tubo grande corrocion', true);
}

// Describe this function...
function reproducir_video_microscopio(video_microscopio_url) {
  assignMat('pantallavideos', 'mtexvideo');
  replaceTexture('mtexvideo', 'Map #303', loadVideo(video_microscopio_url), function() {});
  playSound(loadVideo(video_microscopio_url), true);
}

// bindHTMLObject puzzle
_pGlob.bindHTMLCallbackInfo = [];

function bindHTMLObject(objName, id, isParent) {
    if (!objName)
        return;
    var elem = getElement(id, isParent);
    if (!elem)
        return;
    var obj = getObjectByName(objName);
    if (!obj)
        return;
    var projected = new v3d.Vector3();
    elem.style.top = 0;
    elem.style.left = 0;
    function bindHTMLUpdateCb() {
        var camera = appInstance.getCamera(true);
        camera.updateMatrixWorld();
        obj.getWorldPosition(projected).project(camera);

        var isBehindCamera = false;
        var farNearCoeff = (camera.far + camera.near) / (camera.far - camera.near);
        if (camera.isPerspectiveCamera) {
            isBehindCamera = projected.z > farNearCoeff;
        } else if (camera.isOrthographicCamera) {
            isBehindCamera = projected.z < -farNearCoeff;
        }

        if (isBehindCamera) {
            // behind the camera, just move the element out of the sight
            projected.x = projected.y = -1e5;
        } else {
            projected.x = (0.5 + projected.x / 2) * appInstance.container.offsetWidth;
            projected.y = (0.5 - projected.y / 2) * appInstance.container.offsetHeight;
        }

        elem.style.transform = "translate(" + projected.x + "px, " + projected.y + "px)";
    }

    _pGlob.bindHTMLCallbackInfo.push({
        elem: elem,
        obj: obj,
        callback: bindHTMLUpdateCb
    });

    appInstance.renderCallbacks.push(bindHTMLUpdateCb);
    if (v3d.PL.editorRenderCallbacks)
        v3d.PL.editorRenderCallbacks.push([appInstance, bindHTMLUpdateCb]);
}

// Describe this function...
function bind_element(idElementoBind, idObjetoBind) {
  setHTMLElemStyle('display', 'flex', idElementoBind, false);
  bindHTMLObject(idObjetoBind, idElementoBind, false);
}

// unbindHTMLObject puzzle
function unbindHTMLObject(objName, id, isParent) {
    if (!_pGlob.bindHTMLCallbackInfo)
        return;
    if (!objName)
        return;
    var elem = getElement(id, isParent);
    if (!elem)
        return;
    var obj = getObjectByName(objName);
    if (!obj)
        return;

    for (var i = 0; i < _pGlob.bindHTMLCallbackInfo.length; i++) {
        var cbInfo = _pGlob.bindHTMLCallbackInfo[i];
        if (cbInfo.elem === elem && cbInfo.obj === obj) {

            const editorRBS = v3d.PL.editorRenderCallbacks;
            if (editorRBS) {
                for (var j = 0; j < editorRBS.length; j++) {
                    if (editorRBS[j].indexOf(cbInfo.callback) != -1) {
                        editorRBS.splice(j, 1);
                    }
                }
            }
            appInstance.renderCallbacks.splice(i, 1);
        }
    }
}

// Describe this function...
function unbind_element(idElementoUnbind, idObjetoUnbind) {
  setHTMLElemStyle('display', 'none', idElementoUnbind, false);
  unbindHTMLObject(idObjetoUnbind, idElementoUnbind, false);
}

// Describe this function...
function cambio_texturas() {
  replaceTexture('v2engranaje', 'Map #378', './parte3_1 new_baseColor.png', function() {});
  replaceTexture('v2engranaje', 'Map #379', './parte3_1 new_baseColor.png', function() {});
  replaceTexture('v2engranaje', 'Map #379', './parte3_1 new_baseColor.png', function() {});
  replaceTexture('v2piston', 'Map #409', './parte4_3 new_baseColor.png', function() {});
  replaceTexture('v2piston', 'Map #408', './parte4_3 new_baseColor.png', function() {});
  replaceTexture('v2piston', 'Map #415', './parte4_3 new_baseColor.png', function() {});
  replaceTexture('v2piston2', 'Map #416', './parte4_1 new_baseColor.png', function() {});
  replaceTexture('v2piston2', 'Map #418', './parte4_1 new_baseColor.png', function() {});
  replaceTexture('v2piston2', 'Map #425', './parte4_1 new_baseColor.png', function() {});
  replaceTexture('v2cigueñal', 'Map #53', './parte2_2 new_baseColor.png', function() {});
  replaceTexture('v2cigueñal', 'Map #351', './parte2_2 new_baseColor.png', function() {});
  replaceTexture('v2cigueñal', 'Map #347', './parte2_2 new_baseColor.png', function() {});
  replaceTexture('v2tubo', 'Map #438', './parte5 new_baseColor.png', function() {});
  replaceTexture('v2tubo', 'Map #443', './parte5 new_baseColor.png', function() {});
  replaceTexture('v2tubo', 'Map #444', './parte5 new_baseColor.png', function() {});
  replaceTexture('v2tubogrande', 'Map #456', './parte1_1_new_baseColor.png', function() {});
  replaceTexture('v2tubogrande', 'Map #457', './parte1_1_new_baseColor.png', function() {});
  replaceTexture('v2tubogrande', 'Map #464', './parte1_1_new_baseColor.png', function() {});
}

// Describe this function...
function cambiar_textura_ciguenal_1() {
  replaceTexture('v2cigueñal', 'Map #351', './parte2_2 new_baseColor.png', function() {});
  replaceTexture('v2cigueñal', 'Map #53', './parte2_2 new_baseColor.png', function() {});
  replaceTexture('v2cigueñal', 'Map #347', './parte2_2 new_baseColor.png', function() {});
}

// Describe this function...
function cambiar_textura_piston_2() {
  replaceTexture('v2piston', 'Map #409', './parte4_3 new_baseColor.png', function() {});
  replaceTexture('v2piston', 'Map #408', './parte4_3 new_baseColor.png', function() {});
  replaceTexture('v2piston', 'Map #415', './parte4_3 new_baseColor.png', function() {});
  replaceTexture('v2piston2', 'Map #416', './parte4_1 new_baseColor.png', function() {});
  replaceTexture('v2piston2', 'Map #416', './parte4_1 new_baseColor.png', function() {});
  replaceTexture('v2piston2', 'Map #425', './parte4_1 new_baseColor.png', function() {});
}

// Describe this function...
function cambiar_textura_bomba_3() {
  replaceTexture('v2engranaje', 'Map #378', './parte3_1 new_baseColor.png', function() {});
  replaceTexture('v2engranaje', 'Map #361', './parte3_1 new_baseColor.png', function() {});
  replaceTexture('v2engranaje', 'Map #379', './parte3_1 new_baseColor.png', function() {});
}

// Describe this function...
function cambiar_textura_pin_4() {
  replaceTexture('v2tubo', 'Map #438', './parte5 new_baseColor.png', function() {});
  replaceTexture('v2tubo', 'Map #443', './parte5 new_baseColor.png', function() {});
  replaceTexture('v2tubo', 'Map #444', './parte5 new_baseColor.png', function() {});
}

// Describe this function...
function cambiar_textura_camisa_5() {
  replaceTexture('v2tubogrande', 'Map #456', './parte1_1_new_baseColor.png', function() {});
  replaceTexture('v2tubogrande', 'Map #457', './parte1_1_new_baseColor.png', function() {});
  replaceTexture('v2tubogrande', 'Map #464', './parte1_1_new_baseColor.png', function() {});
  replaceTexture('v2tubogrande', 'Map #476', './parte1_1_new_baseColor.png', function() {});
}


eventHTMLElem('click', 'btn_reproducir_info', false, function(event) {
  is_playing_info = true;
  playSound(loadMedia_HTML5('./audio/audio-informacion.mp3'), false);
  setHTMLElemStyle('display', 'none', 'btn_reproducir_info', false);
  setHTMLElemStyle('display', 'initial', 'btn_is_playing', false);
  setHTMLElemStyle('background', '#1E4055', 'btn_is_playing', false);
  is_paused = false;
  registerSetTimeout(37, function() {
    setHTMLElemStyle('display', 'initial', 'btn_reproducir_info', false);
    setHTMLElemStyle('display', 'none', 'btn_is_playing', false);
    setHTMLElemStyle('background', '#2C8AC7', 'btn_reproducir_info', false);
  });
});

/* Ventana de Informacion */

is_playing_info = false;
is_info_ft = true;

eventHTMLElem('click', 'btn_cerrar_objetivos', false, function(event) {
  setHTMLElemStyle('display', 'none', 'demo-modal-objetivos', false);
  setHTMLElemStyle('background', 'rgba(0,0,0,0)', 'demo-modal-objetivos', false);
});

eventHTMLElem('click', 'btn_abrir_info', false, function(event) {
  setHTMLElemStyle('display', 'flex', 'demo-modal', false);
  setHTMLElemStyle('background', 'rgba(0,0,0,.5)', 'demo-modal', false);
});
eventHTMLElem('click', 'btn_cerrar_info', false, function(event) {
  if (is_info_ft == true) {
    setHTMLElemStyle('display', 'none', 'demo-modal', false);
    setHTMLElemStyle('background', 'rgba(0,0,0,0)', 'demo-modal', false);
    tweenCamera('camarapizarra', 'camarapizarradir', 1, function() {

      operateAnimation('PLAY', 'Box090', 0, 60, 'AUTO', 1,
              function() {
        is_info_ft = false;
        playSound(loadMedia_HTML5('./audios/1.mp3'), false);
        registerSetTimeout(4.2, function() {
          setHTMLElemAttribute('style', 'pointer-events:initial; border:solid 4px #00f4f3;', 'btn__etapa1', false);
        });
      }, false);

          }, 0);
  } else {
    setHTMLElemStyle('display', 'none', 'demo-modal', false);
    setHTMLElemStyle('background', 'rgba(0,0,0,0)', 'demo-modal', false);
  }
});

/* Funcion para saber el nombre de un objeto */
registerOnClick(['ALL_OBJECTS'], false, true, [0,1,2], function() {
  if (selected != _pGlob.pickedObject) {
    outline(['ALL_OBJECTS'], 'DISABLE');
    outline(_pGlob.pickedObject, 'ENABLE');
    selected = _pGlob.pickedObject;
    console.log(selected);
    console.log(getObjectMaterial(_pGlob.pickedObject));
  }
}, function() {});

/* Init */

/* Menu Opciones */

changeVis('mueble_1_objetos_de_rrelleno_dabinete_grande_Box037', false);
changeVis('mueble_1_objetos_de_rrelleno_dabinete_grande_Box038', false);
changeVis('mueble_1_objetos_de_rrelleno_dabinete_grande_Box039', false);
changeVis('laptopvideo', false);
changeVis('pantallavideosm', false);

changeVis('front_lamp_reflector_2', false);
changeVis('luz lamp 003', false);


operateAnimation('STOP', 'Camera002.Target', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('STOP', 'Camera002', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('STOP', getAnimations(['GROUP', 'Group042']), null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('STOP', getAnimations(['GROUP', 'Group043']), null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('STOP', 'Circle', null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('STOP', getAnimations(['GROUP', 'G_abracion']), null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('STOP', getAnimations(['GROUP', 'G_Corrocion']), null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('STOP', getAnimations(['GROUP', 'G_desgaste adhesivo']), null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('STOP', getAnimations(['GROUP', 'G_erocion por contaminacion']), null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('STOP', getAnimations(['GROUP', 'G_fatiga por contacto por rodadura']), null, null, 'AUTO', 1,
        function() {}, false);


operateAnimation('STOP', getAnimations(['GROUP', 'G_microscopio']), null, null, 'AUTO', 1,
        function() {}, false);


ft_etapa1 = true;
ft_etapa2 = true;
ft_etapa3 = true;
ft_etapa4 = true;
ft_etapa5 = true;

fin_etapa1 = false;
fin_etapa2 = false;
fin_etapa3 = false;
fin_etapa4 = false;
fin_etapa5 = false;

/* La luz e de la linterna empieza apagadda */

setHTMLElemAttribute('style', 'pointer-events:none;', 'btn__etapa1', false);

is_etapa1 = true;
is_etapa2 = true;
is_etapa3 = true;
is_etapa4 = true;
is_etapa5 = true;
inspeccion__submenu = true;

changeVis('Box090', true);
changeVis('Circle005', true);
changeVis('<none>', true);
changeVis('<none>', true);

eventHTMLElem('click', 'btn__etapa1', false, function(event) {
  changeVis('Box090', false);
  ocultar_objetos('ciguenal abracion', 'piston desgaste adesibo', 'erosion por contaminacion', 'tubo chiquito fatiga por contactor por rodadura', 'tubo grande corrocion');
  tweenCamera('Camara 002', 'vista camara 002', 1, function() {}, 0);
  setHTMLElemAttribute('style', 'pointer-events:none;', 'btn__etapa1', false);
  cambiar_color_btn_act('btn__etapa1');
  playSound(loadMedia_HTML5('./audios/2.mp3'), false);
  registerSetTimeout(5.2, function() {
    outline('ciguenal abracion', 'ENABLE');
    is_act1_1 = true;
  });
  registerOnClick('ciguenal abracion', false, false, [0,1,2], function() {
    if (is_act1_1 == true) {
      is_act1_1 = false;
      outline('ciguenal abracion', 'DISABLE');
      tweenCamera('Camara 002', 'vista camara 002', 1, function() {

        operateAnimation('PLAY', getAnimations(['GROUP', 'G_abracion']), 0, 150, 'AUTO', 1,
                function() {
          setHTMLElemStyle('display', 'flex', 'nota_1_1_c', false);
          registerSetTimeout(1, function() {
            setHTMLElemStyle('display', 'flex', 'nota_1_1_next', false);
          });
        }, false);

            }, 0);
    }
  }, function() {});
  eventHTMLElem('click', 'nota_1_1_next', false, function(event) {
    tweenCamera('Camara 003', 'vista camara 003', 1, function() {

      operateAnimation('PLAY', getAnimations(['GROUP', 'G_abracion']), 270, 390, 'AUTO', 1,
              function() {}, false);


      operateAnimation('PLAY', 'linterna', 0, 100, 'AUTO', 1,
              function() {
        is_act1_2 = true;
        outline('Shape002', 'ENABLE');
        bind_element('nota_linterna_1_c', 'Shape002');
      }, false);

          }, 0);
    setHTMLElemStyle('display', 'none', 'nota_1_1_c', false);
    setHTMLElemStyle('display', 'none', 'nota_1_1_next', false);
    registerOnClick('Shape002', false, false, [0,1,2], function() {
      if (is_act1_2 == true) {
        is_act1_2 = false;
        unbind_element('nota_linterna_1_c', 'Shape002');
        outline('Shape002', 'DISABLE');

        operateAnimation('PLAY', 'linterna', 330, 590, 'AUTO', 1,
                function() {
          registerSetTimeout(1, function() {
            setHTMLElemStyle('display', 'flex', 'nota_1_2_next', false);
          });
        }, false);

            registerSetTimeout(3, function() {
          tweenCamera('Camara 002', 'vista camara 002', 1, function() {}, 0);
        });
      }
    }, function() {});
  });
  eventHTMLElem('click', 'nota_1_2_next', false, function(event) {
    tweenCamera('Camara 001', 'vista camara 001', 1, function() {

      operateAnimation('PLAY', 'lupa', 0, 100, 'AUTO', 1,
              function() {
        outline('Cylinder002', 'ENABLE');
        is_act1_3 = true;
        bind_element('nota_lupa_2_c', 'Cylinder002');
      }, false);

          }, 0);
    setHTMLElemStyle('display', 'none', 'nota_1_2_next', false);
    registerOnClick('Cylinder002', false, false, [0,1,2], function() {
      if (is_act1_3 == true) {
        is_act1_3 = false;
        unbind_element('nota_lupa_2_c', 'Cylinder002');
        outline('Cylinder002', 'DISABLE');

        operateAnimation('PLAY', 'lupa', 300, 450, 'AUTO', 1,
                function() {
          registerSetTimeout(3, function() {
            setHTMLElemStyle('display', 'flex', 'nota_1_3_next', false);
          });
          setHTMLElemStyle('display', 'flex', 'nota_1_3_c', false);
        }, false);

            registerSetTimeout(3, function() {
          tweenCamera('Camara 004', 'vista camara 004', 1, function() {}, 0);
        });
      }
    }, function() {});
  });
  eventHTMLElem('click', 'nota_1_3_next', false, function(event) {
    bind_element('nota_camara_3_c', 'Circle');
    setHTMLElemStyle('display', 'none', 'nota_1_3_c', false);
    is_act1_4 = true;
    registerSetTimeout(3, function() {
      setHTMLElemStyle('display', 'flex', 'nota_1_4_next', false);
    });
    is_act1_4 = false;
    setHTMLElemStyle('display', 'none', 'nota_1_3_next', false);
  });
  eventHTMLElem('click', 'nota_1_4_next', false, function(event) {
    setHTMLElemAttribute('style', 'pointer-events:none;', 'btn_mover_lupa_linterna_control', false);
    tweenCamera('Camara 005', 'vista camara 005', 1, function() {

      operateAnimation('PLAY', 'linterna', 691, 750, 'AUTO', 1,
              function() {}, false);


      operateAnimation('PLAY', 'lupa', 691, 750, 'AUTO', 1,
              function() {
        setHTMLElemAttribute('style', 'pointer-events:initial;', 'btn_mover_lupa_linterna_control', false);
      }, false);

          }, 0);
    changeVis('Circle', false);
    unbind_element('nota_camara_3_c', 'Circle');
    is_act1_5 = true;
    setHTMLElemStyle('display', 'flex', 'nota_1_5_c', false);
    setHTMLElemStyle('display', 'none', 'nota_1_4_c', false);
    setHTMLElemStyle('display', 'none', 'nota_1_4_next', false);
    setHTMLElemStyle('display', 'flex', 'nota_1_5_c', false);
    setHTMLElemStyle('display', 'flex', 'btn_mover_lupa_linterna_control', false);
    eventHTMLElem('click', 'btn_mover_a_pos3', false, function(event) {
      setHTMLElemAttribute('style', 'pointer-events:none;', 'btn_mover_lupa_linterna_control', false);
      setHTMLElemStyle('display', 'none', 'btn_mover_a_pos3', false);
      setHTMLElemStyle('display', 'block', 'btn_mover_a_pos4', false);
      tweenCamera('Camara 006', 'vista camara 006', 1, function() {

        operateAnimation('PLAY', 'linterna', 751, 810, 'AUTO', 1,
                function() {}, false);


        operateAnimation('PLAY', 'lupa', 751, 810, 'AUTO', 1,
                function() {
          setHTMLElemAttribute('style', 'pointer-events:initial;', 'btn_mover_lupa_linterna_control', false);
        }, false);

            }, 0);
    });
    eventHTMLElem('click', 'btn_mover_a_pos4', false, function(event) {
      setHTMLElemAttribute('style', 'pointer-events:none;', 'btn_mover_lupa_linterna_control', false);
      setHTMLElemStyle('display', 'none', 'btn_mover_a_pos4', false);
      setHTMLElemStyle('display', 'block', 'btn_mover_a_pos1', false);
      tweenCamera('Camara 007', 'vista camara 007', 1, function() {

        operateAnimation('PLAY', 'linterna', 811, 870, 'AUTO', 1,
                function() {}, false);


        operateAnimation('PLAY', 'lupa', 811, 870, 'AUTO', 1,
                function() {
          setHTMLElemAttribute('style', 'pointer-events:initial;', 'btn_mover_lupa_linterna_control', false);
        }, false);

            }, 0);
    });
    eventHTMLElem('click', 'btn_mover_a_pos1', false, function(event) {
      console.log('click en mover a pos 1');
      setHTMLElemAttribute('style', 'pointer-events:none;', 'btn_mover_lupa_linterna_control', false);
      setHTMLElemStyle('display', 'none', 'btn_mover_a_pos1', false);
      setHTMLElemStyle('display', 'block', 'btn_mover_a_pos2', false);
      tweenCamera('Camara 004', 'vista camara 004', 1, function() {

        operateAnimation('PLAY', 'linterna', 871, 930, 'AUTO', 1,
                function() {}, false);


        operateAnimation('PLAY', 'lupa', 871, 930, 'AUTO', 1,
                function() {
          setHTMLElemStyle('display', 'none', 'btn_mover_lupa_linterna_control', false);
          setHTMLElemStyle('display', 'none', 'nota_1_5_c', false);
          console.log('termino animacion de lupa 930');
          playSound(loadMedia_HTML5('./audios/3.mp3'), false);
          registerSetTimeout(5.2, function() {
            is_zoom_lupa1 = true;
            outline('Cylinder002', 'ENABLE');
            registerOnClick('Cylinder002', false, false, [0,1,2], function() {
              console.log('click en lupa sin if');
              if (is_zoom_lupa1 == true) {
                console.log('click en lupa');
                is_zoom_lupa1 = false;
                outline('Cylinder002', 'DISABLE');
                /* aqui va camera zooom */
                tweenCamera('lupap', 'lupad', 1, function() {
                  playSound(loadMedia_HTML5('./audios/4.mp3'), false);
                  setHTMLElemStyle('display', 'block', 'nota_centro_1_1', false);
                }, 0);
              }
            }, function() {});
          });
        }, false);

            }, 0);
    });
    eventHTMLElem('click', 'btn_mover_a_pos2', false, function(event) {
      setHTMLElemAttribute('style', 'pointer-events:none;', 'btn_mover_lupa_linterna_control', false);
      setHTMLElemStyle('display', 'none', 'btn_mover_a_pos2', false);
      setHTMLElemStyle('display', 'block', 'btn_mover_a_pos3', false);
      tweenCamera('Camara 005', 'vista camara 005', 1, function() {

        operateAnimation('PLAY', 'linterna', 691, 750, 'AUTO', 1,
                function() {}, false);


        operateAnimation('PLAY', 'lupa', 691, 750, 'AUTO', 1,
                function() {
          setHTMLElemAttribute('style', 'pointer-events:initial;', 'btn_mover_lupa_linterna_control', false);
        }, false);

            }, 0);
    });
    eventHTMLElem('click', 'nota_centro_1_1', false, function(event) {
      if (is_act1_5 == true) {
        downloadFile(appInstance.renderer.domElement.toDataURL('image/png'), 'ciguenal-1.png');
        registerSetTimeout(5, function() {
          setHTMLElemStyle('display', 'flex', 'nota_1_5_next', false);
        });
      }
    });
  });
  eventHTMLElem('click', 'nota_1_5_next', false, function(event) {
    changeVis('Circle', true);
    is_act1_5 = false;
    setHTMLElemStyle('display', 'none', 'btn_mover_lupa_linterna_control', false);
    tweenCamera('Camara 003', 'vista camara 003', 1, function() {

      operateAnimation('PLAY', 'lupa', 930, 1000, 'AUTO', 1,
              function() {

        operateAnimation('PLAY', 'linterna', 930, 1000, 'AUTO', 1,
                function() {
          is_act1_6 = true;
          bind_element('nota_microscopio_3_c', 'microscopio_1');
          outline('microscopio_1', 'ENABLE');
          tweenCamera('Camara 003', 'vista camara 003', 1, function() {}, 0);
          setMaterialValue('front_reflectors', 'Map #113_MixAmount', 0);
        }, false);

            }, false);

          }, 0);
    setHTMLElemStyle('display', 'none', 'btn_mover_lupa_linterna', false);
    setHTMLElemStyle('display', 'none', 'nota_centro_1_1', false);
    setHTMLElemStyle('display', 'none', 'nota_1_5_next', false);
    registerOnClick('microscopio_1', false, false, [0,1,2], function() {
      if (is_act1_6 == true) {
        is_act1_6 = false;
        unbind_element('nota_microscopio_3_c', 'microscopio_1');
        outline('microscopio_1', 'DISABLE');
        tweenCamera('Camara 003', 'vista camara 003', 1, function() {

          operateAnimation('PLAY', getAnimations(['GROUP', 'G_microscopio']), 0, 150, 'AUTO', 1,
                  function() {

            operateAnimation('PLAY', getAnimations(['GROUP', 'G_microscopio']), 700, 773, 'AUTO', 1,
                    function() {
              registerSetTimeout(1, function() {
                setHTMLElemStyle('display', 'flex', 'nota_1_6_next', false);
              });

              operateAnimation('PLAY', getAnimations(['GROUP', 'G_microscopio']), 773, 850, 'LoopRepeat', 1,
                      function() {}, false);

                  }, false);

                }, false);

              }, 0);
      }
    }, function() {});
  });
  eventHTMLElem('click', 'nota_1_6_next', false, function(event) {
    changeVis('pantallavideosm', true);
    changeVis('laptopvideo', true);
    assignMat('pantallavideosm', 'mtexvideo');
    replaceTexture('mtexvideo', 'Map #303', loadVideo('https://res.cloudinary.com/tecdigital/video/upload/v1665367768/TECSUP/Laboratorios/Inspeccion%20Tecnica/nuevos%20videos/1_p9aqba.mp4'), function() {});
    tweenCamera('camaralap', 'camaralapd', 1, function() {
      is_act1_7 = true;
    }, 0);
    setHTMLElemStyle('display', 'none', 'nota_1_6_next', false);
    setHTMLElemStyle('display', 'none', 'nota_1_6', false);
    setHTMLElemStyle('display', 'flex', 'nota_1_7_c', false);
    setHTMLElemStyle('display', 'flex', 'btn_pausar_video', false);
    setHTMLElemAttribute('style', 'pointer-events:none;', 'btn_zoom_menos_1', false);
    eventHTMLElem('click', 'btn_zoom_mas_1', false, function(event) {
      if (is_act1_7 == true) {
        setHTMLElemAttribute('style', 'pointer-events:none;  background: #fdfdfd;', 'btn_zoom_mas_1', false);
        setHTMLElemAttribute('style', 'background: #fdfdfd;', 'zmas1', false);
        playSound(loadVideo('https://res.cloudinary.com/tecdigital/video/upload/v1665367768/TECSUP/Laboratorios/Inspeccion%20Tecnica/nuevos%20videos/1_p9aqba.mp4'), false);
        registerSetTimeout(18, function() {
          pauseSound(loadVideo('https://res.cloudinary.com/tecdigital/video/upload/v1665367768/TECSUP/Laboratorios/Inspeccion%20Tecnica/nuevos%20videos/1_p9aqba.mp4'));
          video_playback_time_1 = getPlaybackTime(loadVideo('https://res.cloudinary.com/tecdigital/video/upload/v1665367768/TECSUP/Laboratorios/Inspeccion%20Tecnica/nuevos%20videos/1_p9aqba.mp4'));
          console.log(getPlaybackTime(loadVideo('https://res.cloudinary.com/tecdigital/video/upload/v1665367768/TECSUP/Laboratorios/Inspeccion%20Tecnica/nuevos%20videos/1_p9aqba.mp4')));
          setHTMLElemAttribute('style', 'pointer-events:initial;  ', 'btn_zoom_menos_1', false);
          setHTMLElemAttribute('style', 'background: #144a74;', 'zmenos1', false);
        });
      }
    });
    eventHTMLElem('click', 'btn_zoom_menos_1', false, function(event) {
      if (is_act1_7 == true) {
        setHTMLElemAttribute('style', 'pointer-events:none;  ', 'btn_zoom_menos_1', false);
        setHTMLElemAttribute('style', 'background: #fdfdfd;', 'zmenos1', false);
        setHTMLElemStyle('display', 'none', 'btn-video-play', false);
        setHTMLElemStyle('display', 'flex', 'btn-video-pause', false);
        setPlaybackTime(loadVideo('https://res.cloudinary.com/tecdigital/video/upload/v1665367768/TECSUP/Laboratorios/Inspeccion%20Tecnica/nuevos%20videos/1_p9aqba.mp4'), video_playback_time_1);
        playSound(loadVideo('https://res.cloudinary.com/tecdigital/video/upload/v1665367768/TECSUP/Laboratorios/Inspeccion%20Tecnica/nuevos%20videos/1_p9aqba.mp4'), false);
        registerSetTimeout(10, function() {
          playSound(loadMedia_HTML5('./audios/4.mp3'), false);
          registerSetTimeout(1, function() {

            operateAnimation('PAUSE', getAnimations(['GROUP', 'G_microscopio']), null, null, 'AUTO', 1,
                    function() {}, false);

                setHTMLElemStyle('display', 'block', 'nota_centro_1_2', false);
          });
        });
      }
    });
    eventHTMLElem('click', 'nota_centro_1_2', false, function(event) {
      if (is_act1_7 == true) {
        downloadFile(appInstance.renderer.domElement.toDataURL('image/png'), 'ciguenal-2.png');
        registerSetTimeout(5, function() {
          setHTMLElemStyle('display', 'flex', 'nota_1_7_next', false);
        });
      }
    });
  });
  eventHTMLElem('click', 'nota_1_7_next', false, function(event) {
    console.log('77');
    is_act1_7 = false;
    is_act1_8 = true;
    changeVis('pantallavideosm', false);
    changeVis('laptopvideo', false);
    setHTMLElemStyle('display', 'none', 'nota_centro_1_2', false);
    setHTMLElemStyle('display', 'none', 'nota_1_7_next', false);
    setHTMLElemStyle('display', 'none', 'nota_1_7_c', false);
    setHTMLElemStyle('display', 'flex', 'nota_1_8_c', false);
    setHTMLElemStyle('display', 'none', 'btn_pausar_video', false);
    tweenCamera('Camara 003', 'vista camara 003', 1, function() {

      operateAnimation('PLAY', getAnimations(['GROUP', 'G_microscopio']), 700, 940, 'LoopOnce', 2,
              function() {

        operateAnimation('PLAY', getAnimations(['GROUP', 'G_microscopio']), 0, 150, 'LoopOnce', 2,
                function() {

          operateAnimation('PLAY', 'lupa', 0, 100, 'LoopOnce', 2,
                  function() {

            operateAnimation('PLAY', 'linterna', 0, 100, 'LoopOnce', 2,
                    function() {

              operateAnimation('PLAY', getAnimations(['GROUP', 'G_abracion']), 270, 390, 'AUTO', 2,
                      function() {

                operateAnimation('PLAY', getAnimations(['GROUP', 'G_abracion']), 0, 150, 'AUTO', 2,
                        function() {
                  registerSetTimeout(1, function() {
                    setHTMLElemStyle('display', 'flex', 'nota_1_8_next', false);
                  });
                  is_act1_8 = false;
                }, true);

                    }, true);

                  }, true);

                }, true);

              }, true);

            }, true);

          }, 0);
  });
  eventHTMLElem('click', 'nota_1_8_next', false, function(event) {
    mostrar_todos_objetos();
    console.log('1_8');
    tweenCamera('Camara 001', 'vista camara 001', 1, function() {
      playSound(loadMedia_HTML5('./audios/5.mp3'), false);
      registerSetTimeout(6.2, function() {
        setHTMLElemAttribute('style', 'pointer-events:initial; border:solid 4px #00f4f3;', 'btn__etapa2', false);
      });
      setHTMLElemStyle('display', 'none', 'nota_1_8_next', false);
      setHTMLElemStyle('display', 'none', 'nota_1_8_c', false);
      setHTMLElemAttribute('style', 'pointer-events:none;', 'btn__etapa1', false);
      var VARS = Object.defineProperties({}, {
    "is_playing_info": { get: function() { return is_playing_info; }, set: function(val) { is_playing_info = val; } },
    "obj_mostrar": { get: function() { return obj_mostrar; }, set: function(val) { obj_mostrar = val; } },
    "obj_ocultar1": { get: function() { return obj_ocultar1; }, set: function(val) { obj_ocultar1 = val; } },
    "obj_ocultar2": { get: function() { return obj_ocultar2; }, set: function(val) { obj_ocultar2 = val; } },
    "obj_ocultar3": { get: function() { return obj_ocultar3; }, set: function(val) { obj_ocultar3 = val; } },
    "obj_ocultar4": { get: function() { return obj_ocultar4; }, set: function(val) { obj_ocultar4 = val; } },
    "ft_etapa1": { get: function() { return ft_etapa1; }, set: function(val) { ft_etapa1 = val; } },
    "fin_etapa1": { get: function() { return fin_etapa1; }, set: function(val) { fin_etapa1 = val; } },
    "is_etapa1": { get: function() { return is_etapa1; }, set: function(val) { is_etapa1 = val; } },
    "btn_paso": { get: function() { return btn_paso; }, set: function(val) { btn_paso = val; } },
    "video_microscopio_url": { get: function() { return video_microscopio_url; }, set: function(val) { video_microscopio_url = val; } },
    "idElementoBind": { get: function() { return idElementoBind; }, set: function(val) { idElementoBind = val; } },
    "idObjetoBind": { get: function() { return idObjetoBind; }, set: function(val) { idObjetoBind = val; } },
    "idElementoUnbind": { get: function() { return idElementoUnbind; }, set: function(val) { idElementoUnbind = val; } },
    "idObjetoUnbind": { get: function() { return idObjetoUnbind; }, set: function(val) { idObjetoUnbind = val; } },
    "is_info_ft": { get: function() { return is_info_ft; }, set: function(val) { is_info_ft = val; } },
    "ft_etapa2": { get: function() { return ft_etapa2; }, set: function(val) { ft_etapa2 = val; } },
    "fin_etapa2": { get: function() { return fin_etapa2; }, set: function(val) { fin_etapa2 = val; } },
    "is_etapa2": { get: function() { return is_etapa2; }, set: function(val) { is_etapa2 = val; } },
    "is_etapa4": { get: function() { return is_etapa4; }, set: function(val) { is_etapa4 = val; } },
    "is_act1_6": { get: function() { return is_act1_6; }, set: function(val) { is_act1_6 = val; } },
    "ft_etapa3": { get: function() { return ft_etapa3; }, set: function(val) { ft_etapa3 = val; } },
    "fin_etapa3": { get: function() { return fin_etapa3; }, set: function(val) { fin_etapa3 = val; } },
    "is_etapa3": { get: function() { return is_etapa3; }, set: function(val) { is_etapa3 = val; } },
    "inspeccion__submenu": { get: function() { return inspeccion__submenu; }, set: function(val) { inspeccion__submenu = val; } },
    "is_act2_1": { get: function() { return is_act2_1; }, set: function(val) { is_act2_1 = val; } },
    "is_act3_1": { get: function() { return is_act3_1; }, set: function(val) { is_act3_1 = val; } },
    "is_act4_1": { get: function() { return is_act4_1; }, set: function(val) { is_act4_1 = val; } },
    "is_act5_1": { get: function() { return is_act5_1; }, set: function(val) { is_act5_1 = val; } },
    "ft_etapa4": { get: function() { return ft_etapa4; }, set: function(val) { ft_etapa4 = val; } },
    "fin_etapa4": { get: function() { return fin_etapa4; }, set: function(val) { fin_etapa4 = val; } },
    "is_act1_5": { get: function() { return is_act1_5; }, set: function(val) { is_act1_5 = val; } },
    "selected": { get: function() { return selected; }, set: function(val) { selected = val; } },
    "ft_etapa5": { get: function() { return ft_etapa5; }, set: function(val) { ft_etapa5 = val; } },
    "fin_etapa5": { get: function() { return fin_etapa5; }, set: function(val) { fin_etapa5 = val; } },
    "is_etapa5": { get: function() { return is_etapa5; }, set: function(val) { is_etapa5 = val; } },
    "is_act1_1": { get: function() { return is_act1_1; }, set: function(val) { is_act1_1 = val; } },
    "is_paused": { get: function() { return is_paused; }, set: function(val) { is_paused = val; } },
    "is_act1_7": { get: function() { return is_act1_7; }, set: function(val) { is_act1_7 = val; } },
    "is_act2_2": { get: function() { return is_act2_2; }, set: function(val) { is_act2_2 = val; } },
    "is_act3_2": { get: function() { return is_act3_2; }, set: function(val) { is_act3_2 = val; } },
    "is_act4_2": { get: function() { return is_act4_2; }, set: function(val) { is_act4_2 = val; } },
    "is_act5_2": { get: function() { return is_act5_2; }, set: function(val) { is_act5_2 = val; } },
    "is_act1_2": { get: function() { return is_act1_2; }, set: function(val) { is_act1_2 = val; } },
    "is_act2_3": { get: function() { return is_act2_3; }, set: function(val) { is_act2_3 = val; } },
    "is_act2_4": { get: function() { return is_act2_4; }, set: function(val) { is_act2_4 = val; } },
    "is_act3_3": { get: function() { return is_act3_3; }, set: function(val) { is_act3_3 = val; } },
    "is_act3_4": { get: function() { return is_act3_4; }, set: function(val) { is_act3_4 = val; } },
    "is_act4_4": { get: function() { return is_act4_4; }, set: function(val) { is_act4_4 = val; } },
    "is_act5_3": { get: function() { return is_act5_3; }, set: function(val) { is_act5_3 = val; } },
    "is_act5_4": { get: function() { return is_act5_4; }, set: function(val) { is_act5_4 = val; } },
    "is_act1_3": { get: function() { return is_act1_3; }, set: function(val) { is_act1_3 = val; } },
    "is_act1_4": { get: function() { return is_act1_4; }, set: function(val) { is_act1_4 = val; } },
    "is_act2_5": { get: function() { return is_act2_5; }, set: function(val) { is_act2_5 = val; } },
    "is_act3_5": { get: function() { return is_act3_5; }, set: function(val) { is_act3_5 = val; } },
    "is_act4_3": { get: function() { return is_act4_3; }, set: function(val) { is_act4_3 = val; } },
    "is_act4_5": { get: function() { return is_act4_5; }, set: function(val) { is_act4_5 = val; } },
    "is_act5_5": { get: function() { return is_act5_5; }, set: function(val) { is_act5_5 = val; } },
    "is_act2_7": { get: function() { return is_act2_7; }, set: function(val) { is_act2_7 = val; } },
    "is_act3_7": { get: function() { return is_act3_7; }, set: function(val) { is_act3_7 = val; } },
    "is_act4_8": { get: function() { return is_act4_8; }, set: function(val) { is_act4_8 = val; } },
    "is_act5_7": { get: function() { return is_act5_7; }, set: function(val) { is_act5_7 = val; } },
    "is_act2_8": { get: function() { return is_act2_8; }, set: function(val) { is_act2_8 = val; } },
    "is_act3_8": { get: function() { return is_act3_8; }, set: function(val) { is_act3_8 = val; } },
    "is_act4_7": { get: function() { return is_act4_7; }, set: function(val) { is_act4_7 = val; } },
    "is_act5_8": { get: function() { return is_act5_8; }, set: function(val) { is_act5_8 = val; } },
    "is_act1_8": { get: function() { return is_act1_8; }, set: function(val) { is_act1_8 = val; } },
    "is_act2_6": { get: function() { return is_act2_6; }, set: function(val) { is_act2_6 = val; } },
    "is_act3_6": { get: function() { return is_act3_6; }, set: function(val) { is_act3_6 = val; } },
    "is_act4_6": { get: function() { return is_act4_6; }, set: function(val) { is_act4_6 = val; } },
    "is_act5_6": { get: function() { return is_act5_6; }, set: function(val) { is_act5_6 = val; } },
    "video_playback_time_1": { get: function() { return video_playback_time_1; }, set: function(val) { video_playback_time_1 = val; } },
    "video_playback_time": { get: function() { return video_playback_time; }, set: function(val) { video_playback_time = val; } },
    "is_zoom_lupa1": { get: function() { return is_zoom_lupa1; }, set: function(val) { is_zoom_lupa1 = val; } },
});

      Function('app', 'v3d', 'VARS', 'PROC', 'update(1)')(appInstance, v3d, VARS, PROC);

    }, 0);
  });
});

eventHTMLElem('click', 'btn__etapa2', false, function(event) {
  changeVis('Box090', false);
  is_act2_1 = true;
  ocultar_objetos('piston desgaste adesibo', 'ciguenal abracion', 'erosion por contaminacion', 'tubo chiquito fatiga por contactor por rodadura', 'tubo grande corrocion');
  tweenCamera('Camara 002', 'vista camara 002', 1, function() {}, 0);
  cambiar_color_btn_act('btn__etapa2');
  outline('piston desgaste adesibo', 'ENABLE');
  registerOnClick('piston desgaste adesibo', false, false, [0,1,2], function() {
    if (is_act2_1 == true) {
      is_act2_1 = false;
      outline('piston desgaste adesibo', 'DISABLE');
      tweenCamera('Camara 002', 'vista camara 002', 1, function() {

        operateAnimation('PLAY', getAnimations(['GROUP', 'G_desgaste adhesivo']), 0, 150, 'AUTO', 1,
                function() {}, false);

            }, 0);
    }
  }, function() {});
});

eventHTMLElem('click', 'btn__etapa3', false, function(event) {
  changeVis('Box090', false);
  is_act3_1 = true;
  ocultar_objetos('erosion por contaminacion', 'ciguenal abracion', 'piston desgaste adesibo', 'tubo chiquito fatiga por contactor por rodadura', 'tubo grande corrocion');
  tweenCamera('Camara 002', 'vista camara 002', 1, function() {}, 0);
  cambiar_color_btn_act('btn__etapa3');
  outline('erosion por contaminacion', 'ENABLE');
  registerOnClick('erosion por contaminacion', false, false, [0,1,2], function() {
    if (is_act3_1 == true) {
      is_act3_1 = false;
      outline('erosion por contaminacion', 'DISABLE');
      tweenCamera('Camara 002', 'vista camara 002', 1, function() {

        operateAnimation('PLAY', getAnimations(['GROUP', 'G_erocion por contaminacion']), 0, 150, 'AUTO', 1,
                function() {}, false);

            }, 0);
    }
  }, function() {});
});

eventHTMLElem('click', 'btn__etapa4', false, function(event) {
  changeVis('Box090', false);
  is_act4_1 = true;
  ocultar_objetos('tubo chiquito fatiga por contactor por rodadura', 'ciguenal abracion', 'piston desgaste adesibo', 'erosion por contaminacion', 'tubo grande corrocion');
  tweenCamera('Camara 002', 'vista camara 002', 1, function() {}, 0);
  cambiar_color_btn_act('btn__etapa4');
  outline('tubo chiquito fatiga por contactor por rodadura', 'ENABLE');
  registerOnClick('tubo chiquito fatiga por contactor por rodadura', false, false, [0,1,2], function() {
    if (is_act4_1 == true) {
      is_act4_1 = false;
      outline('tubo chiquito fatiga por contactor por rodadura', 'DISABLE');
      tweenCamera('Camara 002', 'vista camara 002', 1, function() {

        operateAnimation('PLAY', getAnimations(['GROUP', 'G_fatiga por contacto por rodadura']), 0, 150, 'AUTO', 1,
                function() {}, false);

            }, 0);
    }
  }, function() {});
});

eventHTMLElem('click', 'btn__etapa5', false, function(event) {
  changeVis('Box090', false);
  is_act5_1 = true;
  ocultar_objetos('tubo grande corrocion', 'ciguenal abracion', 'piston desgaste adesibo', 'erosion por contaminacion', 'tubo chiquito fatiga por contactor por rodadura');
  tweenCamera('Camara 002', 'vista camara 002', 1, function() {}, 0);
  cambiar_color_btn_act('btn__etapa5');
  outline('tubo grande corrocion', 'ENABLE');
  registerOnClick('tubo grande corrocion', false, false, [0,1,2], function() {
    if (is_act5_1 == true) {
      is_act5_1 = false;
      outline('tubo grande corrocion', 'DISABLE');
      tweenCamera('Camara 002', 'vista camara 002', 1, function() {

        operateAnimation('PLAY', getAnimations(['GROUP', 'G_Corrocion']), 0, 150, 'AUTO', 1,
                function() {}, false);

            }, 0);
    }
  }, function() {});
});



} // end of PL.init function

})(); // end of closure

/* ================================ end of code ============================= */
